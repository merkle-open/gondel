{"version":3,"file":"gondel.es5.min.js","sources":["GondelPluginUtils.js","GondelComponentRegistry.js","GondelEventEmitter.js","GondelComponentStarter.js","GondelDomUtils.js","GondelEventRegistry.js","GondelDecorators.js","GondelComponent.js"],"sourcesContent":["var basePluginListener = function (result, data, next) { return next(result); };\n// Global plugin events registry\nexport var pluginEvents = window.__gondelPluginEvents || {};\nwindow.__gondelPluginEvents = pluginEvents;\nexport function fireGondelPluginEvent(eventName, initialValue, data, callback) {\n    var isSyncron = false;\n    var callbackResult;\n    // Execute all bound events for the given name\n    // if they exist\n    (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (processedResult) {\n        isSyncron = true;\n        callbackResult = callback ? callback(processedResult) : processedResult;\n    });\n    // Add a guard to prevent asyncron plugin listeners\n    // to simplify the usage of fireGondelPluginEvent\n    if (!isSyncron) {\n        throw new Error(\"Async plugin listener\");\n    }\n    return callbackResult;\n}\n/**\n * Fire an async event which allows gondel plugins to add features to gondel\n */\nexport function fireAsyncGondelPluginEvent(eventName, initialValue, data) {\n    return new Promise(function (resolve) {\n        (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (result) {\n            resolve(result);\n        });\n    });\n}\n/**\n * Allow plugins to hook into the gondel event system\n */\nexport function addGondelPluginEventListener(eventName, eventListenerCallback) {\n    if (!pluginEvents[eventName]) {\n        pluginEvents[eventName] = basePluginListener;\n    }\n    var previousEventHandler = pluginEvents[eventName];\n    pluginEvents[eventName] = function wrapCallback(result, data, next) {\n        previousEventHandler(result, data, function callNextPlugin(modifiedResult, _, firstNext) {\n            eventListenerCallback(modifiedResult, data, function bindData(result) {\n                next(result, data, firstNext);\n            });\n        });\n    };\n}\n//# sourceMappingURL=GondelPluginUtils.js.map","import { fireGondelPluginEvent } from \"./GondelPluginUtils\";\nvar GondelComponentRegistry = /** @class */ (function () {\n    function GondelComponentRegistry() {\n        this._components = {};\n        this._activeComponents = {};\n    }\n    GondelComponentRegistry.prototype.registerComponent = function (name, gondelComponent) {\n        this._components[name] = gondelComponent;\n    };\n    GondelComponentRegistry.prototype.unregisterComponent = function (name) {\n        delete this._components[name];\n    };\n    GondelComponentRegistry.prototype.getComponent = function (name) {\n        return this._components[name];\n    };\n    /**\n     * Set if a component is used\n     */\n    GondelComponentRegistry.prototype.setActiveState = function (name, isActive) {\n        this._activeComponents[name] = isActive;\n    };\n    return GondelComponentRegistry;\n}());\nexport { GondelComponentRegistry };\nexport var componentRegistries = (window.__gondelRegistries = window.__gondelRegistries || {});\nexport function registerComponent() {\n    var args = arguments;\n    // The componentName is always the first argument\n    var componentName = args[0];\n    // Use namespace from the second argument or fallback to the default \"g\" if it is missing\n    var namespace = typeof args[1] === \"string\" ? args[1] : \"g\";\n    // The last argument is always the component class\n    var component = args[args.length - 1];\n    if (!componentRegistries[namespace]) {\n        componentRegistries[namespace] = new GondelComponentRegistry();\n    }\n    // If this component was already registered we remove the previous one\n    // and notify all plugins - this is especially usefull for hot component replacement\n    if (componentRegistries[namespace].getComponent(componentName)) {\n        fireGondelPluginEvent(\"unregister\", component, { componentName: componentName, namespace: namespace });\n    }\n    // Let plugins know about the new component\n    fireGondelPluginEvent(\"register\", component, {\n        componentName: componentName,\n        namespace: namespace,\n        gondelComponentRegistry: componentRegistries[namespace]\n    }, function (component) {\n        componentRegistries[namespace].registerComponent(componentName, component);\n    });\n}\n//# sourceMappingURL=GondelComponentRegistry.js.map","import { getFirstDomNode } from \"./GondelDomUtils\";\n/**\n * Submit an event which might be caught by foreign gondel, angular or react components\n */\nexport function triggerPublicEvent(eventName, gondelComponent, target, eventData, canBubble) {\n    if (eventData === void 0) { eventData = {}; }\n    if (canBubble === void 0) { canBubble = true; }\n    var event = document.createEvent(\"Event\");\n    var eventTarget = target ? getFirstDomNode(target) : gondelComponent._ctx;\n    if (eventName[0] !== gondelComponent._namespace) {\n        throw new Error(\"Invalid event name '\" +\n            eventName +\n            \"' - use '\" +\n            gondelComponent._namespace +\n            eventName.charAt(0).toUpperCase() +\n            eventName.slice(1) +\n            \"'\");\n    }\n    event.initEvent(eventName, canBubble, true);\n    event.data = {\n        component: gondelComponent,\n        name: gondelComponent._componentName,\n        namespace: gondelComponent._namespace,\n        eventData: eventData\n    };\n    return eventTarget.dispatchEvent(event);\n}\n//# sourceMappingURL=GondelEventEmitter.js.map","import { internalGondelAsyncRefAttribute, internalGondelRefAttribute } from \"./GondelDomUtils\";\nimport { triggerPublicEvent } from \"./GondelEventEmitter\";\nimport { fireGondelPluginEvent } from \"./GondelPluginUtils\";\nvar noop = function () { };\nvar Deferred = function () {\n    var _this = this;\n    this.promise = new Promise(function (resolve) {\n        _this.resolve = resolve;\n    });\n};\n/**\n * Start all components of the gondel component registry\n * for the given dom context\n */\nexport function startComponentsFromRegistry(gondelComponentRegistry, domContext, namespace) {\n    // Get an array of all nodes which match the namespace\n    var gondelDomNodeList = Array.prototype.slice.call(domContext.querySelectorAll(\"[data-\" + namespace + \"-name]\"));\n    if (domContext.hasAttribute(\"data-\" + namespace + \"-name\")) {\n        gondelDomNodeList.push(domContext);\n    }\n    // Remove already booted nodes\n    var pristineGondelDomNodes = gondelDomNodeList.filter(function (gondelDomNode) {\n        return isPristineGondelDomNode(gondelDomNode, namespace);\n    });\n    var bootingDeferred = new Deferred();\n    // Mark all nodes as booting\n    pristineGondelDomNodes.forEach(function (gondelDomNode) {\n        attachGondelBootingFlag(gondelDomNode, bootingDeferred.promise, namespace);\n    });\n    // Create instances\n    var gondelComponents = fireGondelPluginEvent(\"boot\", pristineGondelDomNodes, { namespace: namespace }, function (pristineGondelDomNodes) {\n        return pristineGondelDomNodes.map(function (gondelDomNode) {\n            return constructComponent(gondelDomNode, gondelComponentRegistry, namespace);\n        });\n    });\n    // Get all component names\n    var newComponentNames = getNewComponents(gondelComponents, gondelComponentRegistry);\n    newComponentNames.forEach(function (componentName) {\n        return gondelComponentRegistry.setActiveState(componentName, true);\n    });\n    // Start all components\n    var gondelComponentStartPromise = fireGondelPluginEvent(\"start\", gondelComponents, { newComponentNames: newComponentNames, namespace: namespace, gondelComponentRegistry: gondelComponentRegistry }, function (gondelComponents) {\n        // Wait for async started components\n        return Promise.all(gondelComponents.map(startConstructedComponent));\n    })\n        // Let all plugins know that the components are now all ready to use\n        .then(function () {\n        gondelComponents.forEach(function (gondelComponent) {\n            if (gondelComponent.sync) {\n                gondelComponent.sync();\n            }\n        });\n        return fireGondelPluginEvent(\"sync\", gondelComponents, { namespace: namespace });\n    });\n    // Resolve the booting deferred\n    gondelComponentStartPromise\n        .then(bootingDeferred.resolve, bootingDeferred.resolve)\n        // Rethrow errors (if any)\n        // otherwise the browser dev tools won't show\n        // important bootstrap errors\n        .then(function () { return gondelComponentStartPromise; });\n    // Return a promise of all started components\n    return gondelComponentStartPromise;\n}\n/**\n * Returns true if the given domNode is neither booting nor booted\n */\nexport function isPristineGondelDomNode(domNode, namespace) {\n    return !domNode.hasOwnProperty(internalGondelAsyncRefAttribute + namespace);\n}\n/**\n * Mark the given dom node as controlled by gondel\n */\nexport function attachGondelBootingFlag(domNode, bootingFlag, namespace) {\n    // The name `A` mean async\n    // to allow waiting for asyncronous booted components\n    domNode[internalGondelAsyncRefAttribute + namespace] = bootingFlag;\n}\n/**\n * Constructs a new component\n */\nexport function constructComponent(domNode, gondelComponentRegisty, namespace) {\n    var componentName = domNode.getAttribute(\"data-\" + namespace + \"-name\");\n    var GondelComponent = gondelComponentRegisty.getComponent(componentName);\n    if (GondelComponent === undefined) {\n        throw new Error(\"Failed to boot component - \" + componentName + \" is not registred\");\n    }\n    var componentInstance = new GondelComponent(domNode, componentName);\n    componentInstance._ctx = domNode;\n    componentInstance._namespace = namespace;\n    componentInstance._componentName = componentName;\n    // Add stop method\n    componentInstance.stop = stopStartedComponent.bind(null, componentInstance, componentInstance.stop || noop, namespace);\n    // Create a circular reference which will allow access to the componentInstance from ctx\n    domNode[\"_gondel_\" + namespace] = componentInstance;\n    return componentInstance;\n}\n/**\n * Start a component after it was constructed\n */\nexport function startConstructedComponent(component) {\n    // Skip if the start method is missing\n    if (!component.start) {\n        return;\n    }\n    var expectsNoArguments = component.start.length === 0;\n    // Start the component and expect a promise or a syncronous return value\n    // if the function expects no arguments\n    if (expectsNoArguments) {\n        return component.start();\n    }\n    return new Promise(function (resolve, reject) { return component.start(resolve, reject); });\n}\n/**\n * Stops a started component\n */\nexport function stopStartedComponent(component, internalStopMethod, namespace) {\n    triggerPublicEvent(namespace + \"Stop\", component, component._ctx);\n    // Remove the component instance from the html element\n    delete component._ctx[internalGondelRefAttribute + namespace];\n    delete component._ctx[internalGondelAsyncRefAttribute + namespace];\n    component._stopped = true;\n    fireGondelPluginEvent(\"stop\", component, { namespace: namespace }, internalStopMethod.bind(component));\n}\n/**\n * Filters the given component list and returns the names of those components which have never been started before\n */\nfunction getNewComponents(components, registry) {\n    var componentNameHelper = {};\n    components.forEach(function (component) { return (componentNameHelper[component._componentName] = true); });\n    var componentNames = Object.keys(componentNameHelper);\n    return componentNames.filter(function (componentName) { return !registry._activeComponents[componentName]; });\n}\n//# sourceMappingURL=GondelComponentStarter.js.map","import { componentRegistries } from \"./GondelComponentRegistry\";\nimport { startComponentsFromRegistry } from \"./GondelComponentStarter\";\nexport var internalGondelRefAttribute = \"_gondel_\";\nexport var internalGondelAsyncRefAttribute = \"_gondelA_\";\n/**\n * Returns true if the given object is a single Element\n */\nfunction isElement(domNode) {\n    return domNode.nodeType !== undefined;\n}\n/**\n * This function normalizes takes one of the following:\n *  + document query result\n *  + dom node array\n *  + jquery object\n *  + a single dom node\n * and turns it into a single dom node\n */\nexport function getFirstDomNode(domNode) {\n    if (isElement(domNode)) {\n        return domNode;\n    }\n    return domNode[0];\n}\n/**\n * Start all nodes in the given context\n */\nexport function startComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    if (!componentRegistries[namespace]) {\n        return Promise.resolve([]);\n    }\n    var registry = componentRegistries[namespace];\n    return startComponentsFromRegistry(registry, domContext ? getFirstDomNode(domContext) : document.documentElement, namespace);\n}\n/**\n * Stop all nodes in the given context\n */\nexport function stopComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var components = findComponents(domContext, undefined, namespace);\n    var rootComponent = domContext && getComponentByDomNode(domContext);\n    if (rootComponent) {\n        components.unshift(rootComponent);\n    }\n    components.forEach(function (component) { return component.stop(); });\n}\n/**\n * Returns the gondel instance for the given HtmlELement\n */\nexport function getComponentByDomNode(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (gondelComponent && gondelComponent._ctx) {\n        return gondelComponent;\n    }\n    return;\n}\n/**\n * Returns the gondel instance for the given HtmlELement once it is booted\n */\nexport function getComponentByDomNodeAsync(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelAsyncRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (!gondelComponent) {\n        return Promise.reject(undefined);\n    }\n    // or the component is already booted up return it\n    if (gondelComponent._ctx) {\n        return Promise.resolve(gondelComponent);\n    }\n    // Wait the component to boot up and return it\n    return gondelComponent.then(function () { return firstNode[internalGondelRefAttribute + namespace]; });\n}\n/**\n * Returns all components inside the given node\n */\nexport function findComponents(domNode, componentName, namespace) {\n    if (domNode === void 0) { domNode = document.documentElement; }\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var components = [];\n    var attribute = \"_gondel_\" + namespace;\n    var nodes = firstNode.querySelectorAll(\"[data-\" + namespace + \"-name\" + (componentName ? \"=\\\"\" + componentName + \"\\\"\" : \"\") + \"]\");\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var gondelComponentInstance = node[attribute];\n        // Verify that the component is fully booted\n        if (gondelComponentInstance && gondelComponentInstance._ctx === node) {\n            components.push(gondelComponentInstance);\n        }\n    }\n    return components;\n}\n//# sourceMappingURL=GondelDomUtils.js.map","/**\n * The event registry provides a way to bind events ahead of time\n * with a very small foot print during launch to improve the time to interaction\n */\nimport { getComponentByDomNode } from \"./GondelDomUtils\";\nimport { fireGondelPluginEvent } from \"./GondelPluginUtils\";\n/**\n * Only real browser events are supported.\n * Unfortunately focus and blur do not bubble so a special mapping is needed.\n */\nvar eventNameMapping = {\n    focus: \"focusin\",\n    blur: \"focusout\"\n};\nvar domEventRegistry = window.__gondelDomEvents || {};\nwindow.__gondelDomEvents = domEventRegistry;\n/* istanbul ignore next : Browser polyfill can't be tested */\nvar matches = Element.prototype.matches ||\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\nfunction getParentElements(startElement) {\n    var nodes = [];\n    for (var element = startElement; element; element = element.parentElement) {\n        nodes.push(element);\n    }\n    return nodes;\n}\n/**\n * Returns an array of all handlers which would apply for the current target\n */\nexport function getHandlers(attributeName, eventHandlerRegistry, target) {\n    var parents = getParentElements(target);\n    // Find all selectors which have been registred for this event type\n    // and which have a gondel component in one of the parrent nodes\n    var selectorsOfFoundComponents = [];\n    parents.forEach(function (parent, i) {\n        var componentName = parent.getAttribute(attributeName);\n        var handlers = componentName && eventHandlerRegistry[componentName];\n        if (handlers) {\n            // Store the index where the component was found to know in which part\n            // of the dom tree the selectors could be found\n            selectorsOfFoundComponents.push({ index: i, handlers: handlers });\n        }\n    });\n    // Iterate over all possible selectors to find out if the current event\n    // should fire any gondel handler\n    var handlerQueue = [];\n    selectorsOfFoundComponents.forEach(function (_a) {\n        var index = _a.index, handlers = _a.handlers;\n        var selectorNames = Object.keys(handlers);\n        selectorNames.forEach(function (selectorName) {\n            // If no selector is given the handler does always match\n            if (!selectorName) {\n                return handlerQueue.push({\n                    index: index,\n                    ctx: parents[index],\n                    handlerOptions: handlers[selectorName]\n                });\n            }\n            // Iterate backwards over the children of the component to find an element\n            // which matches the selector for the current handler\n            for (var i = index; --i >= 0;) {\n                if (matches.call(parents[i], selectorName)) {\n                    return handlerQueue.push({\n                        index: i,\n                        ctx: parents[index],\n                        handlerOptions: handlers[selectorName]\n                    });\n                }\n            }\n        });\n    });\n    // Break if we couldn't find any matching element\n    if (handlerQueue.length === 0) {\n        return [];\n    }\n    // Sort the queue so events which are further up the dom are fired first\n    handlerQueue.sort(function (handlerA, handlerB) {\n        return handlerA.index > handlerB.index ? 1 : handlerA.index === handlerB.index ? 0 : -1;\n    });\n    return handlerQueue;\n}\n/**\n * The handler which will catch every event at the documentElement\n */\nfunction handleEvent(namespace, attributeName, eventHandlerRegistry, event) {\n    var target = event.target;\n    var handlers = getHandlers(attributeName, eventHandlerRegistry, target);\n    executeHandlers(handlers, event, namespace);\n}\n/**\n * Returns the namespace registry for the given namespace..\n * This function must be used only by core or plugins\n */\nexport function getEventRegistry(namespace) {\n    if (!domEventRegistry[namespace]) {\n        domEventRegistry[namespace] = {};\n    }\n    return domEventRegistry[namespace];\n}\n/**\n * Notify components\n * This function must be used by core or only by plugins\n */\nexport function executeHandlers(handlers, event, namespace) {\n    var results = [];\n    for (var i = 0; i < handlers.length && !event.cancelBubble; i++) {\n        var handlerObject = handlers[i];\n        var handlerOptions = handlerObject.handlerOptions;\n        var gondelComponent = getComponentByDomNode(handlerObject.ctx, namespace);\n        // Skip if the component wasn't started or if it was stopped\n        if (gondelComponent) {\n            for (var j = 0; j < handlerOptions.length && !event.cancelBubble; j++) {\n                var handlerResult = gondelComponent[handlerOptions[j].handlerName].call(gondelComponent, event);\n                if (typeof handlerResult === \"function\") {\n                    results.push(handlerResult);\n                }\n            }\n        }\n    }\n    // Execute all callbacks to allow grouping write events\n    results.forEach(function (result) {\n        result();\n    });\n}\n/**\n * Add a event lister to the <html> element\n * The listener will always call handleEvent with the domEventRegistry for the given event\n */\nfunction startListeningForEvent(eventName, namespace) {\n    document.documentElement.addEventListener(eventNameMapping[eventName] || eventName, handleEvent.bind(null, namespace, \"data-\" + namespace + \"-name\", domEventRegistry[namespace][eventName]));\n}\n/**\n * Add an event to the Gondel EventRegistry\n */\nexport function addRootEventListener(namespace, domEventName, gondelComponentName, handlerName, handlerOption) {\n    // Create namespace if neededi\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    // Notify all plugins to allow taking over the event handling for a specific event name\n    // This notification is only triggered if a event name e.g. 'click' is used for the first time\n    if (!namespacedDomEventRegistry[domEventName]) {\n        namespacedDomEventRegistry[domEventName] = {};\n        fireGondelPluginEvent(\"registerEvent\", true, {\n            eventName: domEventName,\n            namespace: namespace,\n            eventRegistry: namespacedDomEventRegistry[domEventName]\n        }, function (isNativeEvent) {\n            // If no plugin registered the event\n            // register a native browser event\n            if (isNativeEvent) {\n                startListeningForEvent(domEventName, namespace);\n            }\n        });\n    }\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName] = {};\n    }\n    var handlerOptionObject = typeof handlerOption === \"object\" ? handlerOption : { selector: handlerOption };\n    var selectorKey = handlerOptionObject.selector || \"\";\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = [];\n    }\n    namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].push(Object.assign({ handlerName: handlerName, handlerOption: handlerOption }));\n}\n/**\n * Remove an event from the Gondel EventRegistry\n */\nexport function removeRootEventListener(namespace, domEventName, gondelComponentName, handlerName, selector) {\n    var selectorKey = selector || \"\";\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    if (namespacedDomEventRegistry[domEventName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].filter(function (handlerOption) {\n            return handlerOption.handlerName !== handlerName || handlerName === undefined;\n        });\n    }\n}\n/**\n * Remove all events for a given Component (e.g. a Button) from the Gondel EventRegistry\n */\nexport function removeRootEventListernerForComponent(namespace, gondelComponentName) {\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    for (var eventName in namespacedDomEventRegistry) {\n        /* istanbul ignore else: for in savety check */\n        if (namespacedDomEventRegistry.hasOwnProperty(eventName)) {\n            delete namespacedDomEventRegistry[eventName][gondelComponentName];\n        }\n    }\n}\n//# sourceMappingURL=GondelEventRegistry.js.map","import { addRootEventListener, removeRootEventListernerForComponent } from \"./GondelEventRegistry\";\n// Because of how decorators work @EventListeners is executed before the class is registred\n// so we need to provide a hrm compatible approch initialize and reinitialize the events\nimport { addGondelPluginEventListener } from \"./GondelPluginUtils\";\nimport { registerComponent } from \"./index\";\nexport function Component(componentName, namespace) {\n    return function (constructor) {\n        registerComponent(componentName, namespace, constructor);\n    };\n}\nvar areEventsHookedIntoCore = false;\nfunction hookEventDecoratorInCore() {\n    areEventsHookedIntoCore = true;\n    addGondelPluginEventListener(\"register\", function (component, _a, next) {\n        var componentName = _a.componentName, namespace = _a.namespace, gondelComponentRegistry = _a.gondelComponentRegistry;\n        // Only apply in case the component is already active in the DOM\n        // this will only happen during hot module replacement\n        if (!gondelComponentRegistry._activeComponents[componentName]) {\n            return next(component);\n        }\n        // The decorator will store the event information in two different places.\n        // For ES6 classes it is using __events\n        // For ES5 prototype classes and transpiled ES6 classes it is using prototype.__events\n        var componentEventOptions = (component.prototype && component.prototype.__events) || component.__events;\n        if (componentEventOptions) {\n            componentEventOptions.forEach(function (eventOptions) {\n                addRootEventListener(namespace, \n                /* event name: */ eventOptions[0], componentName, \n                /* handler: */ eventOptions[1], \n                /* selector: */ eventOptions[2]);\n            });\n        }\n        next(component);\n    });\n    addGondelPluginEventListener(\"unregister\", function (component, _a, next) {\n        var componentName = _a.componentName, namespace = _a.namespace;\n        removeRootEventListernerForComponent(namespace, componentName);\n        next(component);\n    });\n    addGondelPluginEventListener(\"start\", function (gondelComponents, _a, next) {\n        var newComponentNames = _a.newComponentNames, gondelComponentRegistry = _a.gondelComponentRegistry, namespace = _a.namespace;\n        var components = newComponentNames.forEach(function (componentName) {\n            var gondelComponent = gondelComponentRegistry.getComponent(componentName);\n            // The decorator will store the event information in two different places.\n            // For ES6 classes it is using __events\n            // For ES5 prototype classes and transpiled ES6 classes it is using prototype.__events\n            var componentEventOptions = (gondelComponent.prototype && gondelComponent.prototype.__events) ||\n                gondelComponent.__events;\n            if (componentEventOptions) {\n                componentEventOptions.forEach(function (eventOptions) {\n                    addRootEventListener(namespace, \n                    /* event name: */ eventOptions[0], componentName, \n                    /* handler: */ eventOptions[1], \n                    /* selector: */ eventOptions[2]);\n                });\n            }\n        });\n        next(gondelComponents);\n    });\n}\n/**\n * The @EventListener decorator will add all event names to a static variable\n */\nexport function EventListener(eventName, selector) {\n    return function (target, handler) {\n        if (!areEventsHookedIntoCore) {\n            hookEventDecoratorInCore();\n        }\n        if (handler.substr(0, 1) !== \"_\") {\n            throw new Error(\"Invalid handler name '\" + handler + \"' use '_\" + handler + \"' instead.\");\n        }\n        if (!target.__events) {\n            target.__events = [];\n        }\n        target.__events.push([eventName, handler, selector]);\n    };\n}\n//# sourceMappingURL=GondelDecorators.js.map","var GondelBaseComponent = /** @class */ (function () {\n    function GondelBaseComponent() {\n    }\n    /**\n     * Stop method\n     */\n    GondelBaseComponent.prototype.stop = function () { };\n    return GondelBaseComponent;\n}());\nexport { GondelBaseComponent };\n//# sourceMappingURL=GondelComponent.js.map"],"names":["basePluginListener","result","data","next","pluginEvents","window","__gondelPluginEvents","fireGondelPluginEvent","eventName","initialValue","callback","callbackResult","isSyncron","processedResult","Error","addGondelPluginEventListener","eventListenerCallback","previousEventHandler","modifiedResult","_","firstNext","GondelComponentRegistry","this","_components","_activeComponents","prototype","registerComponent","name","gondelComponent","unregisterComponent","getComponent","setActiveState","isActive","componentRegistries","__gondelRegistries","args","arguments","componentName","namespace","component","length","gondelComponentRegistry","triggerPublicEvent","target","eventData","canBubble","event","document","createEvent","eventTarget","getFirstDomNode","_ctx","_namespace","charAt","toUpperCase","slice","initEvent","_componentName","dispatchEvent","noop","Deferred","_this","promise","Promise","resolve","startComponentsFromRegistry","domContext","gondelDomNodeList","Array","call","querySelectorAll","hasAttribute","push","pristineGondelDomNodes","filter","gondelDomNode","hasOwnProperty","internalGondelAsyncRefAttribute","bootingDeferred","forEach","domNode","bootingFlag","registry","componentNameHelper","gondelComponents","map","gondelComponentRegisty","getAttribute","GondelComponent","undefined","componentInstance","stop","internalStopMethod","internalGondelRefAttribute","_stopped","bind","constructComponent","newComponentNames","Object","keys","gondelComponentStartPromise","all","startConstructedComponent","then","sync","start","reject","nodeType","getComponentByDomNode","findComponents","documentElement","components","attribute","nodes","i","node","gondelComponentInstance","eventNameMapping","focus","blur","domEventRegistry","__gondelDomEvents","matches","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","handleEvent","attributeName","eventHandlerRegistry","handlers","results","cancelBubble","handlerObject","handlerOptions","ctx","j","handlerResult","handlerName","executeHandlers","parents","startElement","element","parentElement","getParentElements","selectorsOfFoundComponents","parent","index","handlerQueue","_a","selectorName","sort","handlerA","handlerB","getHandlers","getEventRegistry","addRootEventListener","domEventName","gondelComponentName","handlerOption","namespacedDomEventRegistry","eventRegistry","isNativeEvent","addEventListener","selectorKey","selector","assign","areEventsHookedIntoCore","hookEventDecoratorInCore","componentEventOptions","__events","eventOptions","removeRootEventListernerForComponent","GondelBaseComponent","rootComponent","unshift","firstNode","constructor","handler","substr"],"mappings":"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"}
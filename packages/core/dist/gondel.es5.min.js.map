{"version":3,"file":"gondel.es5.min.js","sources":["GondelPluginUtils.js","GondelEventEmitter.js","GondelComponentStarter.js","GondelComponentRegistry.js","GondelAutoStart.js","GondelDomUtils.js","GondelEventRegistry.js","GondelDecorators.js","GondelComponent.js"],"sourcesContent":["var basePluginListener = function (result, data, next) { return next(result); };\r\n// Global plugin events registry\r\nvar pluginEventRegistry = window.__gondelPluginEvents || { pluginMapping: {}, pluginEvents: {} };\r\nwindow.__gondelPluginEvents = pluginEventRegistry;\r\n/** Global Plugin Event Handler Registry */\r\nexport var pluginEvents = pluginEventRegistry.pluginEvents;\r\n// Mapping to track if plugin was already registered to prevent double registrations\r\nvar pluginMapping = pluginEventRegistry.pluginMapping;\r\nexport function fireGondelPluginEvent(eventName, initialValue, data, callback) {\r\n    var isSyncron = false;\r\n    var callbackResult;\r\n    // Execute all bound events for the given name\r\n    // if they exist\r\n    (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (processedResult) {\r\n        isSyncron = true;\r\n        callbackResult = callback ? callback(processedResult) : processedResult;\r\n    });\r\n    // Add a guard to prevent asyncron plugin listeners\r\n    // to simplify the usage of fireGondelPluginEvent\r\n    if (!isSyncron) {\r\n        throw new Error('Async plugin listener');\r\n    }\r\n    return callbackResult;\r\n}\r\n/**\r\n * Fire an async event which allows gondel plugins to add features to gondel\r\n */\r\nexport function fireAsyncGondelPluginEvent(eventName, initialValue, data) {\r\n    return new Promise(function (resolve) {\r\n        (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (result) {\r\n            resolve(result);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Allow plugins to hook into the gondel event system\r\n */\r\nexport function addGondelPluginEventListener(pluginName, eventName, eventListenerCallback) {\r\n    // Prevent any event registration if this pluginHandlerName\r\n    // has already been used\r\n    var pluginHandlerNamePerEvent = \"\".concat(eventName, \"#\").concat(pluginName);\r\n    if (pluginMapping[pluginHandlerNamePerEvent]) {\r\n        return;\r\n    }\r\n    // Flag plugin as registered\r\n    pluginMapping[pluginHandlerNamePerEvent] = true;\r\n    // Ensure that an entry for the given event name exists\r\n    if (!pluginEvents[eventName]) {\r\n        pluginEvents[eventName] = basePluginListener;\r\n    }\r\n    var previousEventHandler = pluginEvents[eventName];\r\n    pluginEvents[eventName] = function wrapCallback(result, data, next) {\r\n        previousEventHandler(result, data, function callNextPlugin(modifiedResult, _, firstNext) {\r\n            eventListenerCallback(modifiedResult, data, function bindData(result) {\r\n                next(result, data, firstNext);\r\n            });\r\n        });\r\n    };\r\n}\r\n//# sourceMappingURL=GondelPluginUtils.js.map","import { getFirstDomNode } from './GondelDomUtils';\r\n/**\r\n * Submit an event which might be caught by foreign gondel, angular or react components\r\n */\r\nexport function triggerPublicEvent(eventName, gondelComponent, target, eventData, canBubble) {\r\n    if (eventData === void 0) { eventData = {}; }\r\n    if (canBubble === void 0) { canBubble = true; }\r\n    var event = document.createEvent('Event');\r\n    var eventTarget = target ? getFirstDomNode(target) : gondelComponent._ctx;\r\n    var namespace = gondelComponent._namespace;\r\n    if (eventName.substr(0, namespace.length) !== namespace) {\r\n        throw new Error(\"Invalid event name '\" +\r\n            eventName +\r\n            \"' - use '\" +\r\n            namespace +\r\n            eventName.charAt(0).toUpperCase() +\r\n            eventName.slice(1) +\r\n            \"'\");\r\n    }\r\n    event.initEvent(eventName, canBubble, true);\r\n    event.data = {\r\n        component: gondelComponent,\r\n        name: gondelComponent._componentName,\r\n        namespace: gondelComponent._namespace,\r\n        eventData: eventData,\r\n    };\r\n    return eventTarget.dispatchEvent(event);\r\n}\r\n//# sourceMappingURL=GondelEventEmitter.js.map","import { internalGondelAsyncRefAttribute, internalGondelRefAttribute } from './GondelDomUtils';\r\nimport { triggerPublicEvent } from './GondelEventEmitter';\r\nimport { fireGondelPluginEvent } from './GondelPluginUtils';\r\nvar noop = function () { };\r\nvar Deferred = function () {\r\n    var _this = this;\r\n    this.promise = new Promise(function (resolve) {\r\n        _this.resolve = resolve;\r\n    });\r\n};\r\n/**\r\n * Start all components of the gondel component registry\r\n * for the given dom context\r\n */\r\nexport function startComponentsFromRegistry(gondelComponentRegistry, domContext, namespace) {\r\n    // Get an array of all nodes which match the namespace\r\n    var gondelDomNodeList = Array.prototype.slice.call(domContext.querySelectorAll(\"[data-\".concat(namespace, \"-name]\")));\r\n    if (domContext.hasAttribute(\"data-\".concat(namespace, \"-name\"))) {\r\n        gondelDomNodeList.push(domContext);\r\n    }\r\n    // Remove already booted nodes\r\n    var pristineGondelDomNodes = gondelDomNodeList.filter(function (gondelDomNode) {\r\n        return isPristineGondelDomNode(gondelDomNode, namespace);\r\n    });\r\n    var bootingDeferred = new Deferred();\r\n    // Mark all nodes as booting\r\n    pristineGondelDomNodes.forEach(function (gondelDomNode) {\r\n        attachGondelBootingFlag(gondelDomNode, bootingDeferred.promise, namespace);\r\n    });\r\n    // Create instances\r\n    var gondelComponents = fireGondelPluginEvent('boot', pristineGondelDomNodes, { namespace: namespace }, function (pristineGondelDomNodes) {\r\n        return pristineGondelDomNodes.map(function (gondelDomNode) {\r\n            return constructComponent(gondelDomNode, gondelComponentRegistry, namespace);\r\n        });\r\n    });\r\n    // Get all component names\r\n    var newComponentNames = getNewComponents(gondelComponents, gondelComponentRegistry);\r\n    newComponentNames.forEach(function (componentName) { return gondelComponentRegistry.setActiveState(componentName, true); });\r\n    // Start all components\r\n    var gondelComponentStartPromise = fireGondelPluginEvent('start', gondelComponents, { newComponentNames: newComponentNames, namespace: namespace, gondelComponentRegistry: gondelComponentRegistry }, function (gondelComponents) {\r\n        // Wait for async started components\r\n        return Promise.all(gondelComponents.map(startConstructedComponent));\r\n    })\r\n        // Let all plugins know that the components are now all ready to use\r\n        .then(function () {\r\n        gondelComponents.forEach(function (gondelComponent) {\r\n            if (gondelComponent.sync) {\r\n                gondelComponent.sync();\r\n            }\r\n        });\r\n        return fireGondelPluginEvent('sync', gondelComponents, { namespace: namespace });\r\n    });\r\n    // Resolve the booting deferred\r\n    gondelComponentStartPromise\r\n        .then(bootingDeferred.resolve, bootingDeferred.resolve)\r\n        // Rethrow errors (if any)\r\n        // otherwise the browser dev tools won't show\r\n        // important bootstrap errors\r\n        .then(function () { return gondelComponentStartPromise; });\r\n    // Return a promise of all started components\r\n    return gondelComponentStartPromise;\r\n}\r\n/**\r\n * Returns true if the given domNode is neither booting nor booted\r\n */\r\nexport function isPristineGondelDomNode(domNode, namespace) {\r\n    return !domNode.hasOwnProperty(internalGondelAsyncRefAttribute + namespace);\r\n}\r\n/**\r\n * Mark the given dom node as controlled by gondel\r\n */\r\nexport function attachGondelBootingFlag(domNode, bootingFlag, namespace) {\r\n    // The name `A` mean async\r\n    // to allow waiting for asyncronous booted components\r\n    domNode[internalGondelAsyncRefAttribute + namespace] = bootingFlag;\r\n}\r\n/**\r\n * Constructs a new component\r\n */\r\nexport function constructComponent(domNode, gondelComponentRegistry, namespace) {\r\n    var componentName = domNode.getAttribute(\"data-\".concat(namespace, \"-name\"));\r\n    var GondelComponent = gondelComponentRegistry.getComponent(componentName);\r\n    if (GondelComponent === undefined) {\r\n        throw new Error(\"Failed to boot component - \".concat(componentName, \" is not registred\"));\r\n    }\r\n    var componentInstance = new GondelComponent(domNode, componentName);\r\n    componentInstance._ctx = domNode;\r\n    componentInstance._namespace = namespace;\r\n    componentInstance._componentName = componentName;\r\n    // Add stop method\r\n    componentInstance.stop = stopStartedComponent.bind(null, componentInstance, componentInstance.stop || noop, namespace);\r\n    // Create a circular reference which will allow access to the componentInstance from ctx\r\n    domNode['_gondel_' + namespace] = componentInstance;\r\n    return componentInstance;\r\n}\r\n/**\r\n * Start a component after it was constructed\r\n */\r\nexport function startConstructedComponent(component) {\r\n    // Skip if the start method is missing\r\n    if (!component.start) {\r\n        return;\r\n    }\r\n    var expectsNoArguments = component.start.length === 0;\r\n    // Start the component and expect a promise or a syncronous return value\r\n    // if the function expects no arguments\r\n    if (expectsNoArguments) {\r\n        return component.start();\r\n    }\r\n    return new Promise(function (resolve, reject) { return component.start(resolve, reject); });\r\n}\r\n/**\r\n * Stops a started component\r\n */\r\nexport function stopStartedComponent(component, internalStopMethod, namespace) {\r\n    triggerPublicEvent(\"\".concat(namespace, \"Stop\"), component, component._ctx);\r\n    // Remove the component instance from the html element\r\n    delete component._ctx[internalGondelRefAttribute + namespace];\r\n    delete component._ctx[internalGondelAsyncRefAttribute + namespace];\r\n    component._stopped = true;\r\n    fireGondelPluginEvent('stop', component, { namespace: namespace }, internalStopMethod.bind(component));\r\n}\r\n/**\r\n * Filters the given component list and returns the names of those components which have never been started before\r\n */\r\nfunction getNewComponents(components, registry) {\r\n    var componentNameHelper = {};\r\n    components.forEach(function (component) { return (componentNameHelper[component._componentName] = true); });\r\n    var componentNames = Object.keys(componentNameHelper);\r\n    return componentNames.filter(function (componentName) { return !registry._activeComponents[componentName]; });\r\n}\r\n//# sourceMappingURL=GondelComponentStarter.js.map","import { fireGondelPluginEvent } from './GondelPluginUtils';\r\nimport { addRegistryToBootloader } from './GondelAutoStart';\r\nvar GLOBAL_GONDEL_REGISTRY_NAMESPACE = '__\\ud83d\\udea1Registries';\r\nvar GondelComponentRegistry = /** @class */ (function () {\r\n    function GondelComponentRegistry() {\r\n        this._components = {};\r\n        this._activeComponents = {};\r\n        this._bootMode = 2 /* onDomReady */;\r\n    }\r\n    GondelComponentRegistry.prototype.registerComponent = function (name, gondelComponent) {\r\n        this._components[name] = gondelComponent;\r\n    };\r\n    GondelComponentRegistry.prototype.unregisterComponent = function (name) {\r\n        delete this._components[name];\r\n    };\r\n    GondelComponentRegistry.prototype.getComponent = function (name) {\r\n        return this._components[name];\r\n    };\r\n    /**\r\n     * Set if a component is used\r\n     */\r\n    GondelComponentRegistry.prototype.setActiveState = function (name, isActive) {\r\n        this._activeComponents[name] = isActive;\r\n    };\r\n    GondelComponentRegistry.prototype.setBootMode = function (bootMode) {\r\n        this._bootMode = bootMode;\r\n    };\r\n    return GondelComponentRegistry;\r\n}());\r\nexport { GondelComponentRegistry };\r\nvar _componentRegistries;\r\nexport function getComponentRegistry(namespace) {\r\n    if (!_componentRegistries) {\r\n        _componentRegistries = window[GLOBAL_GONDEL_REGISTRY_NAMESPACE] || {};\r\n        window[GLOBAL_GONDEL_REGISTRY_NAMESPACE] = _componentRegistries;\r\n    }\r\n    if (!_componentRegistries[namespace]) {\r\n        _componentRegistries[namespace] = new GondelComponentRegistry();\r\n        addRegistryToBootloader(namespace);\r\n    }\r\n    return _componentRegistries[namespace];\r\n}\r\nexport function registerComponent() {\r\n    var args = arguments;\r\n    // The componentName is always the first argument\r\n    var componentName = args[0];\r\n    // Use namespace from the second argument or fallback to the default \"g\" if it is missing\r\n    var namespace = typeof args[1] === 'string' ? args[1] : 'g';\r\n    // The last argument is always the component class\r\n    var component = args[args.length - 1];\r\n    var gondelComponentRegistry = getComponentRegistry(namespace);\r\n    // If this component was already registered we remove the previous one\r\n    // and notify all plugins - this is especially usefull for hot component replacement\r\n    if (gondelComponentRegistry.getComponent(componentName)) {\r\n        fireGondelPluginEvent('unregister', component, { componentName: componentName, namespace: namespace });\r\n    }\r\n    // Let plugins know about the new component\r\n    fireGondelPluginEvent('register', component, {\r\n        componentName: componentName,\r\n        namespace: namespace,\r\n        gondelComponentRegistry: gondelComponentRegistry,\r\n    }, function (component) {\r\n        gondelComponentRegistry.registerComponent(componentName, component);\r\n    });\r\n}\r\n//# sourceMappingURL=GondelComponentRegistry.js.map","import { getComponentRegistry } from './GondelComponentRegistry';\r\nimport { startComponentsFromRegistry } from './GondelComponentStarter';\r\n/**\r\n * By default Gondel will run startComponents on DOMContentLoaded\r\n * To gain more controll over the boot behaviour tihs function can be called\r\n * to disable the auto start\r\n */\r\nexport function disableAutoStart(namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    getComponentRegistry(namespace).setBootMode(1 /* manual */);\r\n}\r\n/**\r\n * Wait for document ready and boot the registry\r\n */\r\nexport function addRegistryToBootloader(namespace) {\r\n    // Use new Promise to wait for the next tick\r\n    var boot = function () {\r\n        Promise.resolve().then(function () {\r\n            var gondelComponentRegistry = getComponentRegistry(namespace);\r\n            if (gondelComponentRegistry._bootMode === 2 /* onDomReady */) {\r\n                gondelComponentRegistry.setBootMode(0 /* alreadyBooted */);\r\n                startComponentsFromRegistry(gondelComponentRegistry, document.documentElement, namespace);\r\n            }\r\n        });\r\n    };\r\n    // Boot if document is complete or once it completes\r\n    if (document.readyState == 'complete') {\r\n        boot();\r\n    }\r\n    else {\r\n        document.addEventListener('DOMContentLoaded', boot, false);\r\n    }\r\n}\r\n//# sourceMappingURL=GondelAutoStart.js.map","import { getComponentRegistry } from './GondelComponentRegistry';\r\nimport { startComponentsFromRegistry } from './GondelComponentStarter';\r\nexport var internalGondelRefAttribute = '_gondel_';\r\nexport var internalGondelAsyncRefAttribute = '_gondelA_';\r\n/**\r\n * Returns true if the given object is a single Element\r\n */\r\nfunction isElement(domNode) {\r\n    return domNode.nodeType !== undefined;\r\n}\r\n/**\r\n * This function normalizes takes one of the following:\r\n *  + document query result\r\n *  + dom node array\r\n *  + jquery object\r\n *  + a single dom node\r\n * and turns it into a single dom node\r\n */\r\nexport function getFirstDomNode(domNode) {\r\n    if (isElement(domNode)) {\r\n        return domNode;\r\n    }\r\n    return domNode[0];\r\n}\r\n/**\r\n * Start all nodes in the given context\r\n */\r\nexport function startComponents(domContext, namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var registry = getComponentRegistry(namespace);\r\n    return startComponentsFromRegistry(registry, domContext ? getFirstDomNode(domContext) : document.documentElement, namespace);\r\n}\r\n/**\r\n * Stop all nodes in the given context\r\n */\r\nexport function stopComponents(domContext, namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var components = findComponents(domContext, undefined, namespace);\r\n    if (domContext && hasMountedGondelComponent(domContext)) {\r\n        components.unshift(getComponentByDomNode(domContext));\r\n    }\r\n    components.forEach(function (component) { return component.stop(); });\r\n}\r\n/**\r\n * Checks if a component is mounted on a certain DOM node\r\n */\r\nexport function hasMountedGondelComponent(domNode, namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var firstNode = getFirstDomNode(domNode);\r\n    var gondelComponent = firstNode[internalGondelRefAttribute + namespace];\r\n    if (!gondelComponent || !gondelComponent._ctx) {\r\n        // no anchor prop found or ctx missing. function is needed\r\n        // that we can type the `getComponentByDomNode` without possible\r\n        // returnal of undefined.\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns the gondel instance for the given HtmlELement\r\n */\r\nexport function getComponentByDomNode(domNode, namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var gondelComponent = extractComponent(getFirstDomNode(domNode), namespace);\r\n    if (!gondelComponent) {\r\n        throw new Error(\"Could not find a started gondel component in namespace \\\"\".concat(namespace, \"\\\",\\nplease check if your component is mounted via 'hasMountedGondelComponent'\"));\r\n    }\r\n    return gondelComponent;\r\n}\r\n/**\r\n * Internal helper function of getComponentByDomNode\r\n *\r\n * Returns the gondel instance from a known HtmlElement\r\n * This function is an internal helper with a possible undefined\r\n * return value.\r\n */\r\nexport function extractComponent(element, namespace) {\r\n    var gondelComponent = element[internalGondelRefAttribute + namespace];\r\n    // Stop if this dom node is not known to gondel\r\n    if (gondelComponent && gondelComponent._ctx) {\r\n        return gondelComponent;\r\n    }\r\n}\r\n/**\r\n * Returns the gondel instance for the given HtmlELement once it is booted\r\n */\r\nexport function getComponentByDomNodeAsync(domNode, namespace) {\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var firstNode = getFirstDomNode(domNode);\r\n    var gondelComponent = firstNode[internalGondelAsyncRefAttribute + namespace];\r\n    // Stop if this dom node is not known to gondel\r\n    if (!gondelComponent) {\r\n        return Promise.reject(undefined);\r\n    }\r\n    // or the component is already booted up return it\r\n    if (gondelComponent._ctx) {\r\n        return Promise.resolve(gondelComponent);\r\n    }\r\n    // Wait the component to boot up and return it\r\n    return gondelComponent.then(function () { return firstNode[internalGondelRefAttribute + namespace]; });\r\n}\r\n/**\r\n * Returns all components inside the given node\r\n */\r\nexport function findComponents(domNode, componentName, namespace) {\r\n    if (domNode === void 0) { domNode = document.documentElement; }\r\n    if (namespace === void 0) { namespace = 'g'; }\r\n    var firstNode = getFirstDomNode(domNode);\r\n    var components = [];\r\n    var attribute = \"_gondel_\".concat(namespace);\r\n    var nodes = firstNode.querySelectorAll(\"[data-\".concat(namespace, \"-name\").concat(componentName ? \"=\\\"\".concat(componentName, \"\\\"\") : '', \"]\"));\r\n    for (var i = 0; i < nodes.length; i++) {\r\n        var node = nodes[i];\r\n        var gondelComponentInstance = node[attribute];\r\n        // Verify that the component is fully booted\r\n        if (gondelComponentInstance && gondelComponentInstance._ctx === node) {\r\n            components.push(gondelComponentInstance);\r\n        }\r\n    }\r\n    return components;\r\n}\r\n//# sourceMappingURL=GondelDomUtils.js.map","/**\r\n * The event registry provides a way to bind events ahead of time\r\n * with a very small foot print during launch to improve the time to interaction\r\n */\r\nimport { extractComponent } from './GondelDomUtils';\r\nimport { fireGondelPluginEvent } from './GondelPluginUtils';\r\n/**\r\n * Only real browser events are supported.\r\n * Unfortunately focus and blur do not bubble so a special mapping is needed.\r\n */\r\nvar eventNameMapping = {\r\n    focus: 'focusin',\r\n    blur: 'focusout',\r\n};\r\n// Polyfill for element.prototype.matches\r\nvar matchesCssSelector = function (element, selector) {\r\n    var elementPrototype = window.Element.prototype;\r\n    /* istanbul ignore next : Browser polyfill can't be tested */\r\n    var elementMatches = elementPrototype.matches ||\r\n        elementPrototype.matchesSelector ||\r\n        elementPrototype.mozMatchesSelector ||\r\n        elementPrototype.msMatchesSelector ||\r\n        elementPrototype.webkitMatchesSelector;\r\n    // Cache the function and call it\r\n    return (matchesCssSelector = function (element, selector) {\r\n        return elementMatches.call(element, selector);\r\n    })(element, selector);\r\n};\r\nfunction getParentElements(startElement) {\r\n    var nodes = [];\r\n    for (var element = startElement; element; element = element.parentElement) {\r\n        nodes.push(element);\r\n    }\r\n    return nodes;\r\n}\r\n/**\r\n * Returns an array of all handlers which would apply for the current target\r\n */\r\nexport function getHandlers(attributeName, eventHandlerRegistry, target) {\r\n    var parents = getParentElements(target);\r\n    // Find all selectors which have been registred for this event type\r\n    // and which have a gondel component in one of the parrent nodes\r\n    var selectorsOfFoundComponents = [];\r\n    parents.forEach(function (parent, i) {\r\n        var componentName = parent.getAttribute(attributeName);\r\n        var handlers = componentName && eventHandlerRegistry[componentName];\r\n        if (handlers) {\r\n            // Store the index where the component was found to know in which part\r\n            // of the dom tree the selectors could be found\r\n            selectorsOfFoundComponents.push({ index: i, handlers: handlers });\r\n        }\r\n    });\r\n    // Iterate over all possible selectors to find out if the current event\r\n    // should fire any gondel handler\r\n    var handlerQueue = [];\r\n    selectorsOfFoundComponents.forEach(function (_a) {\r\n        var index = _a.index, handlers = _a.handlers;\r\n        var selectorNames = Object.keys(handlers);\r\n        selectorNames.forEach(function (selectorName) {\r\n            // If no selector is given the handler does always match\r\n            if (!selectorName) {\r\n                return handlerQueue.push({\r\n                    index: index,\r\n                    ctx: parents[index],\r\n                    target: parents[index],\r\n                    handlerOptions: handlers[selectorName],\r\n                });\r\n            }\r\n            // Iterate backwards over the children of the component to find an element\r\n            // which matches the selector for the current handler\r\n            for (var i = index; --i >= 0;) {\r\n                if (matchesCssSelector(parents[i], selectorName)) {\r\n                    return handlerQueue.push({\r\n                        index: i,\r\n                        ctx: parents[index],\r\n                        target: parents[i],\r\n                        handlerOptions: handlers[selectorName],\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n    // Break if we couldn't find any matching element\r\n    if (handlerQueue.length === 0) {\r\n        return [];\r\n    }\r\n    // Sort the queue so events which are further up the dom are fired first\r\n    handlerQueue.sort(function (handlerA, handlerB) {\r\n        return handlerA.index > handlerB.index ? 1 : handlerA.index === handlerB.index ? 0 : -1;\r\n    });\r\n    return handlerQueue;\r\n}\r\n/**\r\n * The handler which will catch every event at the documentElement\r\n */\r\nfunction handleEvent(namespace, attributeName, eventHandlerRegistry, event) {\r\n    var target = event.target;\r\n    var handlers = getHandlers(attributeName, eventHandlerRegistry, target);\r\n    executeHandlers(handlers, event, namespace);\r\n}\r\nvar _domEventRegistry;\r\n/**\r\n * Returns the namespace registry for the given namespace..\r\n * This function must be used only by core or plugins\r\n */\r\nexport function getEventRegistry(namespace) {\r\n    if (!_domEventRegistry) {\r\n        _domEventRegistry = window['__\\ud83d\\udea1DomEvents'] || {};\r\n        window['__\\ud83d\\udea1DomEvents'] = _domEventRegistry;\r\n    }\r\n    if (!_domEventRegistry[namespace]) {\r\n        _domEventRegistry[namespace] = {};\r\n    }\r\n    return _domEventRegistry[namespace];\r\n}\r\n/**\r\n * Notify components\r\n * This function must be used by core or only by plugins\r\n */\r\nexport function executeHandlers(handlers, event, namespace) {\r\n    /** Store wether the original Event was modified to provide the correct currentTarget */\r\n    var eventObjectRequiresCleanup = false;\r\n    /** Store optional callback results which are executed together to allow grouped redraws */\r\n    var results = [];\r\n    var _loop_1 = function (i) {\r\n        var handlerObject = handlers[i];\r\n        var handlerOptions = handlerObject.handlerOptions;\r\n        var gondelComponent = extractComponent(handlerObject.ctx, namespace);\r\n        // Skip if the component wasn't started or if it was stopped\r\n        if (gondelComponent) {\r\n            // See https://stackoverflow.com/questions/52057726/what-is-the-best-way-to-alter-a-native-browser-event\r\n            Object.defineProperty(event, 'currentTarget', {\r\n                get: function () { return handlerObject.target; },\r\n                configurable: true,\r\n            });\r\n            eventObjectRequiresCleanup = true;\r\n            for (var j = 0; j < handlerOptions.length && !event.cancelBubble; j++) {\r\n                var handlerResult = gondelComponent[handlerOptions[j].handlerName].call(gondelComponent, event);\r\n                if (typeof handlerResult === 'function') {\r\n                    results.push(handlerResult);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    for (var i = 0; i < handlers.length && !event.cancelBubble; i++) {\r\n        _loop_1(i);\r\n    }\r\n    // Execute all callbacks to allow grouping write events\r\n    results.forEach(function (result) {\r\n        result();\r\n    });\r\n    // Cleanup the event object\r\n    if (eventObjectRequiresCleanup) {\r\n        // See https://stackoverflow.com/questions/52057726/what-is-the-best-way-to-alter-a-native-browser-event\r\n        delete event.currentTarget;\r\n    }\r\n}\r\n/**\r\n * Add a event lister to the <html> element\r\n * The listener will always call handleEvent with the domEventRegistry for the given event\r\n */\r\nfunction startListeningForEvent(eventName, namespace) {\r\n    document.documentElement.addEventListener(eventNameMapping[eventName] || eventName, handleEvent.bind(null, namespace, \"data-\".concat(namespace, \"-name\"), getEventRegistry(namespace)[eventName]));\r\n}\r\n/**\r\n * Add an event to the Gondel EventRegistry\r\n */\r\nexport function addRootEventListener(namespace, domEventName, gondelComponentName, handlerName, handlerOption) {\r\n    // Create namespace if neededi\r\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\r\n    // Notify all plugins to allow taking over the event handling for a specific event name\r\n    // This notification is only triggered if a event name e.g. 'click' is used for the first time\r\n    if (!namespacedDomEventRegistry[domEventName]) {\r\n        namespacedDomEventRegistry[domEventName] = {};\r\n        fireGondelPluginEvent('registerEvent', true, {\r\n            eventName: domEventName,\r\n            namespace: namespace,\r\n            eventRegistry: namespacedDomEventRegistry[domEventName],\r\n        }, function (isNativeEvent) {\r\n            // If no plugin registered the event\r\n            // register a native browser event\r\n            if (isNativeEvent) {\r\n                startListeningForEvent(domEventName, namespace);\r\n            }\r\n        });\r\n    }\r\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName]) {\r\n        namespacedDomEventRegistry[domEventName][gondelComponentName] = {};\r\n    }\r\n    var handlerOptionObject = typeof handlerOption === 'object' ? handlerOption : { selector: handlerOption };\r\n    var selectorKey = handlerOptionObject.selector || '';\r\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\r\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = [];\r\n    }\r\n    namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].push(Object.assign({ handlerName: handlerName, handlerOption: handlerOption }));\r\n}\r\n/**\r\n * Remove an event from the Gondel EventRegistry\r\n */\r\nexport function removeRootEventListener(namespace, domEventName, gondelComponentName, handlerName, selector) {\r\n    var selectorKey = selector || '';\r\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\r\n    if (namespacedDomEventRegistry[domEventName] &&\r\n        namespacedDomEventRegistry[domEventName][gondelComponentName] &&\r\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\r\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].filter(function (handlerOption) {\r\n            return handlerOption.handlerName !== handlerName || handlerName === undefined;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Remove all events for a given Component (e.g. a Button) from the Gondel EventRegistry\r\n */\r\nexport function removeRootEventListernerForComponent(namespace, gondelComponentName) {\r\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\r\n    for (var eventName in namespacedDomEventRegistry) {\r\n        /* istanbul ignore else: for in savety check */\r\n        if (namespacedDomEventRegistry.hasOwnProperty(eventName)) {\r\n            delete namespacedDomEventRegistry[eventName][gondelComponentName];\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=GondelEventRegistry.js.map","import { addRootEventListener, removeRootEventListernerForComponent } from './GondelEventRegistry';\r\n// Because of how decorators work @EventListeners is executed before the class is registred\r\n// so we need to provide a hrm compatible approch initialize and reinitialize the events\r\nimport { addGondelPluginEventListener } from './GondelPluginUtils';\r\nimport { registerComponent } from './index';\r\nexport function Component(componentName, namespace) {\r\n    return function (constructor) {\r\n        registerComponent(componentName, namespace, constructor);\r\n    };\r\n}\r\nfunction hookEventDecoratorInCore() {\r\n    addGondelPluginEventListener('GondelDecorators', 'register', function (component, _a, next) {\r\n        var componentName = _a.componentName, namespace = _a.namespace, gondelComponentRegistry = _a.gondelComponentRegistry;\r\n        // Only apply in case the component is already active in the DOM\r\n        // this will only happen during hot module replacement\r\n        if (!gondelComponentRegistry._activeComponents[componentName]) {\r\n            return next(component);\r\n        }\r\n        // The decorator will store the event information in two different places.\r\n        // For ES6 classes it is using __events\r\n        // For ES5 prototype classes and transpiled ES6 classes it is using prototype.__events\r\n        var componentEventOptions = (component.prototype && component.prototype.__events) || component.__events;\r\n        if (componentEventOptions) {\r\n            componentEventOptions.forEach(function (eventOptions) {\r\n                addRootEventListener(namespace, \r\n                /* event name: */ eventOptions[0], componentName, \r\n                /* handler: */ eventOptions[1], \r\n                /* selector: */ eventOptions[2]);\r\n            });\r\n        }\r\n        next(component);\r\n    });\r\n    addGondelPluginEventListener('GondelDecorators', 'unregister', function (component, _a, next) {\r\n        var componentName = _a.componentName, namespace = _a.namespace;\r\n        removeRootEventListernerForComponent(namespace, componentName);\r\n        next(component);\r\n    });\r\n    addGondelPluginEventListener('GondelDecorators', 'start', function (gondelComponents, _a, next) {\r\n        var newComponentNames = _a.newComponentNames, gondelComponentRegistry = _a.gondelComponentRegistry, namespace = _a.namespace;\r\n        newComponentNames.forEach(function (componentName) {\r\n            var gondelComponent = gondelComponentRegistry.getComponent(componentName);\r\n            // The decorator will store the event information in two different places.\r\n            // For ES6 classes it is using __events\r\n            // For ES5 prototype classes and transpiled ES6 classes it is using prototype.__events\r\n            var componentEventOptions = (gondelComponent.prototype && gondelComponent.prototype.__events) ||\r\n                gondelComponent.__events;\r\n            if (componentEventOptions) {\r\n                componentEventOptions.forEach(function (eventOptions) {\r\n                    addRootEventListener(namespace, \r\n                    /* event name: */ eventOptions[0], componentName, \r\n                    /* handler: */ eventOptions[1], \r\n                    /* selector: */ eventOptions[2]);\r\n                });\r\n            }\r\n        });\r\n        next(gondelComponents);\r\n    });\r\n}\r\n/**\r\n * The @EventListener decorator will add all event names to a static variable\r\n */\r\nexport function EventListener(eventName, selector) {\r\n    return function (target, handler) {\r\n        hookEventDecoratorInCore();\r\n        if (handler.substr(0, 1) !== '_') {\r\n            throw new Error(\"Invalid handler name '\".concat(handler, \"' use '_\").concat(handler, \"' instead.\"));\r\n        }\r\n        if (!target.__events) {\r\n            target.__events = [];\r\n        }\r\n        target.__events.push([eventName, handler, selector]);\r\n    };\r\n}\r\n//# sourceMappingURL=GondelDecorators.js.map","var GondelBaseComponent = /** @class */ (function () {\r\n    function GondelBaseComponent(domNode, componentName) {\r\n    }\r\n    /**\r\n     * Stop method\r\n     */\r\n    GondelBaseComponent.prototype.stop = function () { };\r\n    return GondelBaseComponent;\r\n}());\r\nexport { GondelBaseComponent };\r\n//# sourceMappingURL=GondelComponent.js.map"],"names":["basePluginListener","result","data","next","pluginEventRegistry","window","__gondelPluginEvents","pluginMapping","pluginEvents","fireGondelPluginEvent","eventName","initialValue","callback","callbackResult","isSyncron","processedResult","Error","addGondelPluginEventListener","pluginName","eventListenerCallback","pluginHandlerNamePerEvent","concat","previousEventHandler","modifiedResult","_","firstNext","triggerPublicEvent","gondelComponent","target","eventData","canBubble","event","document","createEvent","eventTarget","getFirstDomNode","_ctx","namespace","_namespace","substr","length","charAt","toUpperCase","slice","initEvent","component","name","_componentName","dispatchEvent","noop","Deferred","_this","this","promise","Promise","resolve","startComponentsFromRegistry","gondelComponentRegistry","domContext","gondelDomNodeList","Array","prototype","call","querySelectorAll","hasAttribute","push","pristineGondelDomNodes","filter","gondelDomNode","domNode","hasOwnProperty","internalGondelAsyncRefAttribute","isPristineGondelDomNode","bootingDeferred","forEach","bootingFlag","attachGondelBootingFlag","registry","componentNameHelper","gondelComponents","map","componentName","getAttribute","GondelComponent","getComponent","undefined","componentInstance","stop","stopStartedComponent","bind","constructComponent","newComponentNames","Object","keys","_activeComponents","setActiveState","gondelComponentStartPromise","all","startConstructedComponent","then","sync","start","reject","internalStopMethod","internalGondelRefAttribute","_stopped","_componentRegistries","GondelComponentRegistry","_components","_bootMode","registerComponent","unregisterComponent","isActive","setBootMode","bootMode","getComponentRegistry","GLOBAL_GONDEL_REGISTRY_NAMESPACE","boot","documentElement","readyState","addEventListener","addRegistryToBootloader","args","arguments","nodeType","isElement","hasMountedGondelComponent","getComponentByDomNode","extractComponent","element","findComponents","firstNode","components","attribute","nodes","i","node","gondelComponentInstance","_domEventRegistry","eventNameMapping","focus","blur","matchesCssSelector","selector","elementPrototype","Element","elementMatches","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","webkitMatchesSelector","handleEvent","attributeName","eventHandlerRegistry","handlers","parents","startElement","parentElement","getParentElements","selectorsOfFoundComponents","parent","index","handlerQueue","_a","selectorName","ctx","handlerOptions","sort","handlerA","handlerB","getHandlers","eventObjectRequiresCleanup","results","_loop_1","handlerObject","defineProperty","get","configurable","j","cancelBubble","handlerResult","handlerName","currentTarget","executeHandlers","getEventRegistry","addRootEventListener","domEventName","gondelComponentName","handlerOption","namespacedDomEventRegistry","eventRegistry","isNativeEvent","startListeningForEvent","selectorKey","assign","hookEventDecoratorInCore","componentEventOptions","__events","eventOptions","removeRootEventListernerForComponent","GondelBaseComponent","constructor","handler","unshift"],"mappings":"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"}
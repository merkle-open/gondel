{"version":3,"file":"index.es5.js","sources":["../../../core/dist/GondelPluginUtils.js","../../../core/dist/GondelComponentRegistry.js","../../../core/dist/GondelDomUtils.js","../../../core/dist/GondelEventRegistry.js","index.js","../../../../node_modules/enquire.js/src/index.js"],"sourcesContent":["var basePluginListener = function (result, data, next) { return next(result); };\n// Global plugin events registry\nexport var pluginEvents = window.__gondelPluginEvents || {};\nwindow.__gondelPluginEvents = pluginEvents;\nexport function fireGondelPluginEvent(eventName, initialValue, data, callback) {\n    var isSyncron = false;\n    var callbackResult;\n    // Execute all bound events for the given name\n    // if they exist\n    (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (processedResult) {\n        isSyncron = true;\n        callbackResult = callback ? callback(processedResult) : processedResult;\n    });\n    // Add a guard to prevent asyncron plugin listeners\n    // to simplify the usage of fireGondelPluginEvent\n    if (!isSyncron) {\n        throw new Error(\"Async plugin listener\");\n    }\n    return callbackResult;\n}\n/**\n * Fire an async event which allows gondel plugins to add features to gondel\n */\nexport function fireAsyncGondelPluginEvent(eventName, initialValue, data) {\n    return new Promise(function (resolve) {\n        (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (result) {\n            resolve(result);\n        });\n    });\n}\n/**\n * Allow plugins to hook into the gondel event system\n */\nexport function addGondelPluginEventListener(eventName, eventListenerCallback) {\n    if (!pluginEvents[eventName]) {\n        pluginEvents[eventName] = basePluginListener;\n    }\n    var previousEventHandler = pluginEvents[eventName];\n    pluginEvents[eventName] = function wrapCallback(result, data, next) {\n        previousEventHandler(result, data, function callNextPlugin(modifiedResult, _, firstNext) {\n            eventListenerCallback(modifiedResult, data, function bindData(result) {\n                next(result, data, firstNext);\n            });\n        });\n    };\n}\n//# sourceMappingURL=GondelPluginUtils.js.map","import { fireGondelPluginEvent } from \"./GondelPluginUtils\";\nvar GondelComponentRegistry = /** @class */ (function () {\n    function GondelComponentRegistry() {\n        this._components = {};\n        this._activeComponents = {};\n    }\n    GondelComponentRegistry.prototype.registerComponent = function (name, gondelComponent) {\n        this._components[name] = gondelComponent;\n    };\n    GondelComponentRegistry.prototype.unregisterComponent = function (name) {\n        delete this._components[name];\n    };\n    GondelComponentRegistry.prototype.getComponent = function (name) {\n        return this._components[name];\n    };\n    /**\n     * Set if a component is used\n     */\n    GondelComponentRegistry.prototype.setActiveState = function (name, isActive) {\n        this._activeComponents[name] = isActive;\n    };\n    return GondelComponentRegistry;\n}());\nexport { GondelComponentRegistry };\nexport var componentRegistries = (window.__gondelRegistries = window.__gondelRegistries || {});\nexport function registerComponent() {\n    var args = arguments;\n    // The componentName is always the first argument\n    var componentName = args[0];\n    // Use namespace from the second argument or fallback to the default \"g\" if it is missing\n    var namespace = typeof args[1] === \"string\" ? args[1] : \"g\";\n    // The last argument is always the component class\n    var component = args[args.length - 1];\n    if (!componentRegistries[namespace]) {\n        componentRegistries[namespace] = new GondelComponentRegistry();\n    }\n    // If this component was already registered we remove the previous one\n    // and notify all plugins - this is especially usefull for hot component replacement\n    if (componentRegistries[namespace].getComponent(componentName)) {\n        fireGondelPluginEvent(\"unregister\", component, { componentName: componentName, namespace: namespace });\n    }\n    // Let plugins know about the new component\n    fireGondelPluginEvent(\"register\", component, {\n        componentName: componentName,\n        namespace: namespace,\n        gondelComponentRegistry: componentRegistries[namespace]\n    }, function (component) {\n        componentRegistries[namespace].registerComponent(componentName, component);\n    });\n}\n//# sourceMappingURL=GondelComponentRegistry.js.map","import { startComponentsFromRegistry } from \"./GondelComponentStarter\";\nimport { componentRegistries } from \"./GondelComponentRegistry\";\n/**\n * Returns true if the given object is a single Element\n */\nfunction isElement(domNode) {\n    return domNode.nodeType !== undefined;\n}\n/**\n * This function normalizes takes one of the following:\n *  + document query result\n *  + dom node array\n *  + jquery object\n *  + a single dom node\n * and turns it into a single dom node\n */\nexport function getFirstDomNode(domNode) {\n    if (isElement(domNode)) {\n        return domNode;\n    }\n    return domNode[0];\n}\n/**\n * Start all nodes in the given context\n */\nexport function startComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    if (!componentRegistries[namespace]) {\n        return Promise.resolve([]);\n    }\n    var registry = componentRegistries[namespace];\n    return startComponentsFromRegistry(registry, domContext ? getFirstDomNode(domContext) : document.documentElement, namespace);\n}\n/**\n * Stop all nodes in the given context\n */\nexport function stopComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var components = findComponents(domContext, undefined, namespace);\n    var rootComponent = domContext && getComponentByDomNode(domContext);\n    if (rootComponent) {\n        components.unshift(rootComponent);\n    }\n    components.forEach(function (component) { return component.stop(); });\n}\n/**\n * Returns the gondel instance for the given HtmlELement\n */\nexport function getComponentByDomNode(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[\"_gondel_\" + namespace];\n    // Stop if this dom node is not known to gondel\n    if (gondelComponent && gondelComponent._ctx) {\n        return gondelComponent;\n    }\n    return;\n}\n/**\n * Returns the gondel instance for the given HtmlELement once it is booted\n */\nexport function getComponentByDomNodeAsync(domNode, namespace) {\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[\"_gondelA_\" + namespace];\n    // Stop if this dom node is not known to gondel\n    if (!gondelComponent) {\n        return Promise.reject(undefined);\n    }\n    // or the component is already booted up return it\n    if (gondelComponent._ctx) {\n        return Promise.resolve(gondelComponent);\n    }\n    // Wait the component to boot up and return it\n    return gondelComponent.then(function () { return firstNode[\"_gondel_\" + namespace]; });\n}\n/**\n * Returns all components inside the given node\n */\nexport function findComponents(domNode, componentName, namespace) {\n    if (domNode === void 0) { domNode = document.documentElement; }\n    if (namespace === void 0) { namespace = \"g\"; }\n    var firstNode = getFirstDomNode(domNode);\n    var components = [];\n    var attribute = \"_gondel_\" + namespace;\n    var nodes = firstNode.querySelectorAll(\"[data-\" + namespace + \"-name\" + (componentName ? \"=\\\"\" + componentName + \"\\\"\" : \"\") + \"]\");\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var gondelComponentInstance = node[attribute];\n        // Verify that the component is fully booted\n        if (gondelComponentInstance && gondelComponentInstance._ctx === node) {\n            components.push(gondelComponentInstance);\n        }\n    }\n    return components;\n}\n//# sourceMappingURL=GondelDomUtils.js.map","/**\n * The event registry provides a way to bind events ahead of time\n * with a very small foot print during launch to improve the time to interaction\n */\nimport { getComponentByDomNode } from \"./GondelDomUtils\";\nimport { fireGondelPluginEvent } from \"./GondelPluginUtils\";\n/**\n * Only real browser events are supported.\n * Unfortunately focus and blur do not bubble so a special mapping is needed.\n */\nvar eventNameMapping = {\n    focus: \"focusin\",\n    blur: \"focusout\"\n};\nvar domEventRegistry = window.__gondelDomEvents || {};\nwindow.__gondelDomEvents = domEventRegistry;\n/* istanbul ignore next : Browser polyfill can't be tested */\nvar matches = Element.prototype.matches ||\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\nfunction getParentElements(startElement) {\n    var nodes = [];\n    for (var element = startElement; element; element = element.parentElement) {\n        nodes.push(element);\n    }\n    return nodes;\n}\n/**\n * Returns an array of all handlers which would apply for the current target\n */\nexport function getHandlers(attributeName, eventHandlerRegistry, target) {\n    var parents = getParentElements(target);\n    // Find all selectors which have been registred for this event type\n    // and which have a gondel component in one of the parrent nodes\n    var selectorsOfFoundComponents = [];\n    parents.forEach(function (parent, i) {\n        var componentName = parent.getAttribute(attributeName);\n        var handlers = componentName && eventHandlerRegistry[componentName];\n        if (handlers) {\n            // Store the index where the component was found to know in which part\n            // of the dom tree the selectors could be found\n            selectorsOfFoundComponents.push({ index: i, handlers: handlers });\n        }\n    });\n    // Iterate over all possible selectors to find out if the current event\n    // should fire any gondel handler\n    var handlerQueue = [];\n    selectorsOfFoundComponents.forEach(function (_a) {\n        var index = _a.index, handlers = _a.handlers;\n        var selectorNames = Object.keys(handlers);\n        selectorNames.forEach(function (selectorName) {\n            // If no selector is given the handler does always match\n            if (!selectorName) {\n                return handlerQueue.push({\n                    index: index,\n                    ctx: parents[index],\n                    handlerOptions: handlers[selectorName]\n                });\n            }\n            // Iterate backwards over the children of the component to find an element\n            // which matches the selector for the current handler\n            for (var i = index; --i >= 0;) {\n                if (matches.call(parents[i], selectorName)) {\n                    return handlerQueue.push({\n                        index: i,\n                        ctx: parents[index],\n                        handlerOptions: handlers[selectorName]\n                    });\n                }\n            }\n        });\n    });\n    // Break if we couldn't find any matching element\n    if (handlerQueue.length === 0) {\n        return [];\n    }\n    // Sort the queue so events which are further up the dom are fired first\n    handlerQueue.sort(function (handlerA, handlerB) {\n        return handlerA.index > handlerB.index ? 1 : handlerA.index === handlerB.index ? 0 : -1;\n    });\n    return handlerQueue;\n}\n/**\n * The handler which will catch every event at the documentElement\n */\nfunction handleEvent(namespace, attributeName, eventHandlerRegistry, event) {\n    var target = event.target;\n    var handlers = getHandlers(attributeName, eventHandlerRegistry, target);\n    executeHandlers(handlers, event, namespace);\n}\n/**\n * Returns the namespace registry for the given namespace..\n * This function must be used only by core or plugins\n */\nexport function getEventRegistry(namespace) {\n    if (!domEventRegistry[namespace]) {\n        domEventRegistry[namespace] = {};\n    }\n    return domEventRegistry[namespace];\n}\n/**\n * Notify components\n * This function must be used by core or only by plugins\n */\nexport function executeHandlers(handlers, event, namespace) {\n    var results = [];\n    for (var i = 0; i < handlers.length && !event.cancelBubble; i++) {\n        var handlerObject = handlers[i];\n        var handlerOptions = handlerObject.handlerOptions;\n        var gondelComponent = getComponentByDomNode(handlerObject.ctx, namespace);\n        // Skip if the component wasn't started or if it was stopped\n        if (gondelComponent) {\n            for (var j = 0; j < handlerOptions.length && !event.cancelBubble; j++) {\n                var handlerResult = gondelComponent[handlerOptions[j].handlerName].call(gondelComponent, event);\n                if (typeof handlerResult === \"function\") {\n                    results.push(handlerResult);\n                }\n            }\n        }\n    }\n    // Execute all callbacks to allow grouping write events\n    results.forEach(function (result) {\n        result();\n    });\n}\n/**\n * Add a event lister to the <html> element\n * The listener will always call handleEvent with the domEventRegistry for the given event\n */\nfunction startListeningForEvent(eventName, namespace) {\n    document.documentElement.addEventListener(eventNameMapping[eventName] || eventName, handleEvent.bind(null, namespace, \"data-\" + namespace + \"-name\", domEventRegistry[namespace][eventName]));\n}\n/**\n * Add an event to the Gondel EventRegistry\n */\nexport function addRootEventListener(namespace, domEventName, gondelComponentName, handlerName, handlerOption) {\n    // Create namespace if neededi\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    // Notify all plugins to allow taking over the event handling for a specific event name\n    // This notification is only triggered if a event name e.g. 'click' is used for the first time\n    if (!namespacedDomEventRegistry[domEventName]) {\n        namespacedDomEventRegistry[domEventName] = {};\n        fireGondelPluginEvent(\"registerEvent\", true, {\n            eventName: domEventName,\n            namespace: namespace,\n            eventRegistry: namespacedDomEventRegistry[domEventName]\n        }, function (isNativeEvent) {\n            // If no plugin registered the event\n            // register a native browser event\n            if (isNativeEvent) {\n                startListeningForEvent(domEventName, namespace);\n            }\n        });\n    }\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName] = {};\n    }\n    var handlerOptionObject = typeof handlerOption === \"object\" ? handlerOption : { selector: handlerOption };\n    var selectorKey = handlerOptionObject.selector || \"\";\n    if (!namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = [];\n    }\n    namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].push(Object.assign({ handlerName: handlerName, handlerOption: handlerOption }));\n}\n/**\n * Remove an event from the Gondel EventRegistry\n */\nexport function removeRootEventListener(namespace, domEventName, gondelComponentName, handlerName, selector) {\n    var selectorKey = selector || \"\";\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    if (namespacedDomEventRegistry[domEventName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName] &&\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey]) {\n        namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey] = namespacedDomEventRegistry[domEventName][gondelComponentName][selectorKey].filter(function (handlerOption) {\n            return handlerOption.handlerName !== handlerName || handlerName === undefined;\n        });\n    }\n}\n/**\n * Remove all events for a given Component (e.g. a Button) from the Gondel EventRegistry\n */\nexport function removeRootEventListernerForComponent(namespace, gondelComponentName) {\n    var namespacedDomEventRegistry = getEventRegistry(namespace);\n    for (var eventName in namespacedDomEventRegistry) {\n        /* istanbul ignore else: for in savety check */\n        if (namespacedDomEventRegistry.hasOwnProperty(eventName)) {\n            delete namespacedDomEventRegistry[eventName][gondelComponentName];\n        }\n    }\n}\n//# sourceMappingURL=GondelEventRegistry.js.map","/**\n * This is a plugin to initialize enquire.js and fire a viewportChange event when triggering a breakpoint\n */\nimport { addGondelPluginEventListener, getComponentByDomNode } from \"@gondel/core\";\nimport * as enquire from \"enquire.js\";\nvar currentViewport;\n/**\n * This function returns all components for the given eventRegistry which can be found in the dom.\n */\nfunction getComponentsInEventRegistry(eventRegistry, namespace) {\n    var selector = Object.keys(eventRegistry)\n        .map(function (componentName) { return \"[data-\" + namespace + \"-name=\\\"\" + componentName + \"\\\"]\"; })\n        .join(\",\");\n    if (!selector) {\n        return [];\n    }\n    var componentElements = document.documentElement.querySelectorAll(selector);\n    var components = [];\n    for (var i = 0; i < componentElements.length; i++) {\n        var component = getComponentByDomNode(componentElements[i], namespace);\n        if (component) {\n            components.push(component);\n        }\n    }\n    return components;\n}\n/**\n * This function fire's a custom gondel event to all registered components\n */\nfunction fireViewportChangeEvent(viewport, eventRegistry, namespace) {\n    var components = getComponentsInEventRegistry(eventRegistry, namespace);\n    var handlerResults = [];\n    components.forEach(function (component) {\n        Object.keys(eventRegistry[component._componentName]).forEach(function (selector) {\n            if (selector === \"\" || viewport === selector) {\n                eventRegistry[component._componentName][selector].forEach(function (handlerOption) {\n                    handlerResults.push(component[handlerOption.handlerName].call(component, { viewport: viewport }));\n                });\n            }\n        });\n    });\n}\n/**\n * This function returns the current viewport\n */\nexport function getCurrentViewport() {\n    return currentViewport;\n}\n/**\n * Convert pixel to em\n */\nfunction px2em(pixelValue) {\n    return (Math.round(pixelValue / 16 * 100) / 100 + \"em\" // add unit as string\n    );\n}\n/**\n * This function generate mediaQueries from breakPoints\n */\nfunction generateMediaQueries(breakPoints) {\n    var breakpointNames = Object.keys(breakPoints).sort(function (breakpointNameA, breakpointNameB) {\n        if (breakPoints[breakpointNameA] > breakPoints[breakpointNameB]) {\n            return 1;\n        }\n        if (breakPoints[breakpointNameA] < breakPoints[breakpointNameB]) {\n            return -1;\n        }\n        return 0;\n    });\n    return breakpointNames.map(function (breakpointName, i) {\n        var max = breakPoints[breakpointName] === Infinity ? undefined : breakPoints[breakpointName];\n        var min = breakpointNames[i - 1] === undefined ? undefined : breakPoints[breakpointNames[i - 1]] + 1;\n        var queryString;\n        if (min && max) {\n            queryString = \"(min-width: \" + px2em(min) + \") and (max-width: \" + px2em(max) + \")\";\n        }\n        else if (min) {\n            queryString = \"(min-width: \" + px2em(min) + \")\";\n        }\n        else if (max) {\n            queryString = \"(max-width: \" + px2em(max) + \")\";\n        }\n        else {\n            throw new Error('The smallest provided viewport must not be set to Infinity');\n        }\n        return { name: breakpointName, query: queryString, min: min, max: max };\n    });\n}\n/**\n * This function set's up enquire.js\n */\nfunction setupViewportChangeEvent(breakPoints, eventRegistry, namespace) {\n    var mediaQueries = generateMediaQueries(breakPoints);\n    var _loop_1 = function (viewport) {\n        enquire.register(viewport.query, {\n            setup: function () {\n                currentViewport = viewport.name;\n            },\n            match: function () {\n                currentViewport = viewport.name;\n                fireViewportChangeEvent(viewport.name, eventRegistry, namespace);\n            },\n            // trigger setup the first time a viewport is actually entered\n            deferSetup: true\n        });\n    };\n    for (var _i = 0, mediaQueries_1 = mediaQueries; _i < mediaQueries_1.length; _i++) {\n        var viewport = mediaQueries_1[_i];\n        _loop_1(viewport);\n    }\n}\n/**\n * This function creates a custom gondel event\n */\nexport default function initMediaQueries(breakPoints) {\n    addGondelPluginEventListener(\"registerEvent\", function addViewportChangeEvent(isNativeEvent, _a, resolve) {\n        var eventName = _a.eventName, namespace = _a.namespace, eventRegistry = _a.eventRegistry;\n        if (eventName === \"viewportChange\") {\n            setupViewportChangeEvent(breakPoints, eventRegistry, namespace);\n            // Tell the event system that it should not listen for the event:\n            resolve(false);\n        }\n        else {\n            resolve(isNativeEvent);\n        }\n    });\n}\n//# sourceMappingURL=index.js.map","var MediaQueryDispatch = require('./MediaQueryDispatch');\nmodule.exports = new MediaQueryDispatch();\n"],"names":["basePluginListener","result","data","next","pluginEvents","window","__gondelPluginEvents","__gondelRegistries","getComponentByDomNode","domNode","namespace","gondelComponent","undefined","nodeType","_ctx","domEventRegistry","__gondelDomEvents","Element","prototype","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","currentViewport","MediaQueryDispatch","require","fireViewportChangeEvent","viewport","eventRegistry","components","selector","Object","keys","map","componentName","join","componentElements","document","documentElement","querySelectorAll","i","length","component","push","getComponentsInEventRegistry","handlerResults","forEach","_componentName","handlerOption","handlerName","call","px2em","pixelValue","Math","round","setupViewportChangeEvent","breakPoints","breakpointNames","_loop_1","enquire.register","query","setup","name","match","deferSetup","_i","mediaQueries_1","sort","breakpointNameA","breakpointNameB","breakpointName","queryString","max","Infinity","min","Error","module","exports","eventName","eventListenerCallback","previousEventHandler","modifiedResult","_","firstNext","addGondelPluginEventListener","isNativeEvent","_a","resolve"],"mappings":"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"}
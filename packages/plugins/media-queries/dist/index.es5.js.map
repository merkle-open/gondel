{"version":3,"file":"index.es5.js","sources":["../../../core/dist/GondelPluginUtils.js","../../../core/dist/GondelDomUtils.js","index.js"],"sourcesContent":["var basePluginListener = function (result, data, next) { return next(result); };\n// Global plugin events registry\nvar pluginEventRegistry = window.__gondelPluginEvents || { pluginMapping: {}, pluginEvents: {} };\nwindow.__gondelPluginEvents = pluginEventRegistry;\n/** Global Plugin Event Handler Registry */\nexport var pluginEvents = pluginEventRegistry.pluginEvents;\n// Mapping to track if plugin was already registered to prevent double registrations\nvar pluginMapping = pluginEventRegistry.pluginMapping;\nexport function fireGondelPluginEvent(eventName, initialValue, data, callback) {\n    var isSyncron = false;\n    var callbackResult;\n    // Execute all bound events for the given name\n    // if they exist\n    (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (processedResult) {\n        isSyncron = true;\n        callbackResult = callback ? callback(processedResult) : processedResult;\n    });\n    // Add a guard to prevent asyncron plugin listeners\n    // to simplify the usage of fireGondelPluginEvent\n    if (!isSyncron) {\n        throw new Error('Async plugin listener');\n    }\n    return callbackResult;\n}\n/**\n * Fire an async event which allows gondel plugins to add features to gondel\n */\nexport function fireAsyncGondelPluginEvent(eventName, initialValue, data) {\n    return new Promise(function (resolve) {\n        (pluginEvents[eventName] || basePluginListener)(initialValue, data, function (result) {\n            resolve(result);\n        });\n    });\n}\n/**\n * Allow plugins to hook into the gondel event system\n */\nexport function addGondelPluginEventListener(pluginName, eventName, eventListenerCallback) {\n    // Prevent any event registration if this pluginHandlerName\n    // has already been used\n    var pluginHandlerNamePerEvent = \"\".concat(eventName, \"#\").concat(pluginName);\n    if (pluginMapping[pluginHandlerNamePerEvent]) {\n        return;\n    }\n    // Flag plugin as registered\n    pluginMapping[pluginHandlerNamePerEvent] = true;\n    // Ensure that an entry for the given event name exists\n    if (!pluginEvents[eventName]) {\n        pluginEvents[eventName] = basePluginListener;\n    }\n    var previousEventHandler = pluginEvents[eventName];\n    pluginEvents[eventName] = function wrapCallback(result, data, next) {\n        previousEventHandler(result, data, function callNextPlugin(modifiedResult, _, firstNext) {\n            eventListenerCallback(modifiedResult, data, function bindData(result) {\n                next(result, data, firstNext);\n            });\n        });\n    };\n}\n//# sourceMappingURL=GondelPluginUtils.js.map","import { getComponentRegistry } from './GondelComponentRegistry';\nimport { startComponentsFromRegistry } from './GondelComponentStarter';\nexport var internalGondelRefAttribute = '_gondel_';\nexport var internalGondelAsyncRefAttribute = '_gondelA_';\n/**\n * Returns true if the given object is a single Element\n */\nfunction isElement(domNode) {\n    return domNode.nodeType !== undefined;\n}\n/**\n * This function normalizes takes one of the following:\n *  + document query result\n *  + dom node array\n *  + jquery object\n *  + a single dom node\n * and turns it into a single dom node\n */\nexport function getFirstDomNode(domNode) {\n    if (isElement(domNode)) {\n        return domNode;\n    }\n    return domNode[0];\n}\n/**\n * Start all nodes in the given context\n */\nexport function startComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = 'g'; }\n    var registry = getComponentRegistry(namespace);\n    return startComponentsFromRegistry(registry, domContext ? getFirstDomNode(domContext) : document.documentElement, namespace);\n}\n/**\n * Stop all nodes in the given context\n */\nexport function stopComponents(domContext, namespace) {\n    if (namespace === void 0) { namespace = 'g'; }\n    var components = findComponents(domContext, undefined, namespace);\n    if (domContext && hasMountedGondelComponent(domContext)) {\n        components.unshift(getComponentByDomNode(domContext));\n    }\n    components.forEach(function (component) { return component.stop(); });\n}\n/**\n * Checks if a component is mounted on a certain DOM node\n */\nexport function hasMountedGondelComponent(domNode, namespace) {\n    if (namespace === void 0) { namespace = 'g'; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelRefAttribute + namespace];\n    if (!gondelComponent || !gondelComponent._ctx) {\n        // no anchor prop found or ctx missing. function is needed\n        // that we can type the `getComponentByDomNode` without possible\n        // returnal of undefined.\n        return false;\n    }\n    return true;\n}\n/**\n * Returns the gondel instance for the given HtmlELement\n */\nexport function getComponentByDomNode(domNode, namespace) {\n    if (namespace === void 0) { namespace = 'g'; }\n    var gondelComponent = extractComponent(getFirstDomNode(domNode), namespace);\n    if (!gondelComponent) {\n        throw new Error(\"Could not find a started gondel component in namespace \\\"\".concat(namespace, \"\\\",\\nplease check if your component is mounted via 'hasMountedGondelComponent'\"));\n    }\n    return gondelComponent;\n}\n/**\n * Internal helper function of getComponentByDomNode\n *\n * Returns the gondel instance from a known HtmlElement\n * This function is an internal helper with a possible undefined\n * return value.\n */\nexport function extractComponent(element, namespace) {\n    var gondelComponent = element[internalGondelRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (gondelComponent && gondelComponent._ctx) {\n        return gondelComponent;\n    }\n}\n/**\n * Returns the gondel instance for the given HtmlELement once it is booted\n */\nexport function getComponentByDomNodeAsync(domNode, namespace) {\n    if (namespace === void 0) { namespace = 'g'; }\n    var firstNode = getFirstDomNode(domNode);\n    var gondelComponent = firstNode[internalGondelAsyncRefAttribute + namespace];\n    // Stop if this dom node is not known to gondel\n    if (!gondelComponent) {\n        return Promise.reject(undefined);\n    }\n    // or the component is already booted up return it\n    if (gondelComponent._ctx) {\n        return Promise.resolve(gondelComponent);\n    }\n    // Wait the component to boot up and return it\n    return gondelComponent.then(function () { return firstNode[internalGondelRefAttribute + namespace]; });\n}\n/**\n * Returns all components inside the given node\n */\nexport function findComponents(domNode, componentName, namespace) {\n    if (domNode === void 0) { domNode = document.documentElement; }\n    if (namespace === void 0) { namespace = 'g'; }\n    var firstNode = getFirstDomNode(domNode);\n    var components = [];\n    var attribute = \"_gondel_\".concat(namespace);\n    var nodes = firstNode.querySelectorAll(\"[data-\".concat(namespace, \"-name\").concat(componentName ? \"=\\\"\".concat(componentName, \"\\\"\") : '', \"]\"));\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var gondelComponentInstance = node[attribute];\n        // Verify that the component is fully booted\n        if (gondelComponentInstance && gondelComponentInstance._ctx === node) {\n            components.push(gondelComponentInstance);\n        }\n    }\n    return components;\n}\n//# sourceMappingURL=GondelDomUtils.js.map","/**\n * This is a plugin to initialize enquire.js and fire a viewportChange event when triggering a breakpoint\n */\nimport { addGondelPluginEventListener, getComponentByDomNode } from '@gondel/core';\n/**\n * The VIEWPORT_ENTERED will be fired if a new viewport is entered\n */\nexport var VIEWPORT_ENTERED = '@gondel/plugin-media-queries--viewport-entered';\nvar currentViewport;\n/**\n * This function returns all components for the given eventRegistry which can be found in the dom.\n */\nfunction getComponentsInEventRegistry(eventRegistry, namespace) {\n    var selector = Object.keys(eventRegistry)\n        .map(function (componentName) { return \"[data-\".concat(namespace, \"-name=\\\"\").concat(componentName, \"\\\"]\"); })\n        .join(',');\n    if (!selector) {\n        return [];\n    }\n    var componentElements = document.documentElement.querySelectorAll(selector);\n    var components = [];\n    for (var i = 0; i < componentElements.length; i++) {\n        var component = getComponentByDomNode(componentElements[i], namespace);\n        if (component) {\n            components.push(component);\n        }\n    }\n    return components;\n}\n/**\n * This function fire's a custom gondel event to all registered components\n */\nfunction fireViewportChangeEvent(viewport, eventRegistry, namespace) {\n    var components = getComponentsInEventRegistry(eventRegistry, namespace);\n    var handlerResults = [];\n    components.forEach(function (component) {\n        Object.keys(eventRegistry[component._componentName]).forEach(function (selector) {\n            if (selector === '' || viewport === selector) {\n                eventRegistry[component._componentName][selector].forEach(function (handlerOption) {\n                    handlerResults.push(component[handlerOption.handlerName].call(component, { viewport: viewport }));\n                });\n            }\n        });\n    });\n    handlerResults.forEach(function (handlerResults) { return function () {\n        if (typeof handlerResults === 'function') {\n            handlerResults();\n        }\n    }; });\n}\n/**\n * This function returns the current viewport\n */\nexport function getCurrentViewport() {\n    return currentViewport;\n}\n/**\n * Converts the given pixel breakpoint object into a em breakpoint object\n */\nfunction convertBreakpointsToEm(breakpointsInPx) {\n    var breakpointsInEm = {};\n    var breakpointNames = Object.keys(breakpointsInPx);\n    breakpointNames.forEach(function (breakpointName) {\n        breakpointsInEm[breakpointName] = px2em(breakpointsInPx[breakpointName]);\n    });\n    return breakpointsInEm;\n}\n/**\n * Convert pixel to em\n */\nfunction px2em(pixelValue) {\n    return Math.round((pixelValue / 16) * 100) / 1000;\n}\n/**\n * This function generate mediaQueries from breakPoints\n */\nfunction generateMediaQueries(breakPoints, unit) {\n    // Sort breakpoints by size\n    var breakpointNames = Object.keys(breakPoints).sort(function (breakpointNameA, breakpointNameB) {\n        if (breakPoints[breakpointNameA] > breakPoints[breakpointNameB]) {\n            return 1;\n        }\n        if (breakPoints[breakpointNameA] < breakPoints[breakpointNameB]) {\n            return -1;\n        }\n        return 0;\n    });\n    // Convert breakpoints from 980 into (min-width: 700) and (max-width: 980)\n    // by using the previous breakpoint\n    return breakpointNames.map(function (breakpointName, i) {\n        // If this is the first breakpoint we don't need a min value\n        var min = breakpointNames[i - 1] === undefined ? undefined : breakPoints[breakpointNames[i - 1]] + 1;\n        // If this is the last breakpoint we don't need a max value\n        var max = breakPoints[breakpointName] === Infinity ? undefined : breakPoints[breakpointName];\n        var queryString;\n        if (min && max) {\n            queryString = \"(min-width: \".concat(min).concat(unit, \") and (max-width: \").concat(max).concat(unit, \")\");\n        }\n        else if (min) {\n            queryString = \"(min-width: \".concat(min).concat(unit, \")\");\n        }\n        else if (max) {\n            queryString = \"(max-width: \".concat(max).concat(unit, \")\");\n        }\n        else {\n            // This should only happen if the user did a miss configuration\n            // with only a single breakpoint which is set to infinity\n            throw new Error('The smallest provided viewport must not be set to Infinity');\n        }\n        return { name: breakpointName, query: queryString, min: min, max: max };\n    });\n}\n/**\n * Use enquire.js to listen for viewport changes\n * Once a viewport changed call all gondel plugins which are listening\n */\nfunction setupViewportChangeEvent(mediaQueries, eventRegistry, namespace) {\n    var _loop_1 = function (viewport) {\n        matchMedia(viewport.query).addListener(function (mediaQueryList) {\n            if (mediaQueryList.matches) {\n                fireViewportChangeEvent(viewport.name, eventRegistry, namespace);\n            }\n        });\n    };\n    for (var _i = 0, mediaQueries_1 = mediaQueries; _i < mediaQueries_1.length; _i++) {\n        var viewport = mediaQueries_1[_i];\n        _loop_1(viewport);\n    }\n}\n/**\n * Use enquire.js to listen for viewport changes\n * for the getCurrentViewport helper method\n */\nfunction setupCurrentViewportHelper(mediaQueries) {\n    var _loop_2 = function (viewport) {\n        var viewportMediaQueryList = matchMedia(viewport.query);\n        // Set initial viewport\n        if (viewportMediaQueryList.matches) {\n            currentViewport = viewport.name;\n        }\n        // Watch for media query changes\n        viewportMediaQueryList.addListener(function (mediaQueryList) {\n            if (mediaQueryList.matches) {\n                currentViewport = viewport.name;\n            }\n        });\n    };\n    for (var _i = 0, mediaQueries_2 = mediaQueries; _i < mediaQueries_2.length; _i++) {\n        var viewport = mediaQueries_2[_i];\n        _loop_2(viewport);\n    }\n}\n/**\n * This function creates a custom gondel event\n */\nexport function initMediaQueriesPlugin(options) {\n    // Get the converted breakpoint values\n    var breakPoints = options.convertToEm ? convertBreakpointsToEm(options.breakPoints) : options.breakPoints;\n    // Get the unit\n    var unit = options.unit || (options.convertToEm ? 'em' : 'px');\n    var mediaQueries = generateMediaQueries(breakPoints, unit);\n    // Setup the viewport helper independently so it will\n    // also be avialiable if no component is listening to events:\n    setupCurrentViewportHelper(mediaQueries);\n    addGondelPluginEventListener('MediaQueries', 'registerEvent', function addViewportChangeEvent(isNativeEvent, _a, resolve) {\n        var eventName = _a.eventName, namespace = _a.namespace, eventRegistry = _a.eventRegistry;\n        // Ignore all events but the viewportChange event\n        if (eventName !== VIEWPORT_ENTERED) {\n            resolve(isNativeEvent);\n            return;\n        }\n        setupViewportChangeEvent(mediaQueries, eventRegistry, namespace);\n        // Tell the event system that it should not listen for the event:\n        resolve(false);\n    });\n}\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}
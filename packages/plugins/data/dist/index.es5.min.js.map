{"version":3,"file":"index.es5.min.js","sources":["DataPlugin.js","serializer/JSON.js","serializer/Number.js","serializer/Boolean.js","DataDecorator.js"],"sourcesContent":["import { addGondelPluginEventListener } from \"@gondel/core\";\r\nexport var areDataBindingsHookedIntoCore = false;\r\nexport function hookDataDecoratorIntoCore() {\r\n    areDataBindingsHookedIntoCore = true;\r\n    addGondelPluginEventListener(\"Data\", \"start\", function (gondelComponents, _, next) {\r\n        gondelComponents.forEach(function (gondelComponent) {\r\n            var componentDataBindings = (gondelComponent.prototype &&\r\n                gondelComponent.prototype.__dataBindings) ||\r\n                gondelComponent.__dataBindings;\r\n            if (!componentDataBindings || componentDataBindings.length === 0) {\r\n                return next(gondelComponents);\r\n            }\r\n            componentDataBindings.forEach(function (_a) {\r\n                var propertyKey = _a[0], attributeKey = _a[1], serializer = _a[2];\r\n                var initialValue = gondelComponent[propertyKey];\r\n                Object.defineProperty(gondelComponent, propertyKey, {\r\n                    enumerable: true,\r\n                    configurable: false,\r\n                    get: function () {\r\n                        var value = gondelComponent._ctx.getAttribute(attributeKey);\r\n                        if (serializer && value !== null) {\r\n                            return serializer.deserialize(value);\r\n                        }\r\n                        return value;\r\n                    },\r\n                    set: function (value) {\r\n                        if (value === undefined) {\r\n                            gondelComponent._ctx.removeAttribute(attributeKey);\r\n                        }\r\n                        if (serializer) {\r\n                            value = serializer.serialize(value);\r\n                        }\r\n                        gondelComponent._ctx.setAttribute(attributeKey, value);\r\n                    },\r\n                });\r\n                if (initialValue) {\r\n                    gondelComponent[propertyKey] =\r\n                        gondelComponent[propertyKey] || initialValue;\r\n                    initialValue = undefined;\r\n                }\r\n            });\r\n        });\r\n        next(gondelComponents);\r\n    });\r\n}\r\n//# sourceMappingURL=DataPlugin.js.map","export var serialize = function (value) { return JSON.stringify(value); };\r\nexport var deserialize = function (value) { return JSON.parse(value); };\r\nexport default {\r\n    serialize: serialize,\r\n    deserialize: deserialize,\r\n};\r\n//# sourceMappingURL=JSON.js.map","export var serialize = function (value) { return \"\" + value; };\r\nexport var deserialize = function (value) { return parseFloat(value); };\r\nexport default {\r\n    serialize: serialize,\r\n    deserialize: deserialize,\r\n};\r\n//# sourceMappingURL=Number.js.map","export var serialize = function (value) { return \"\" + value; };\r\nexport var deserialize = function (value) { return value === \"true\"; };\r\nexport default {\r\n    serialize: serialize,\r\n    deserialize: deserialize,\r\n};\r\n//# sourceMappingURL=Boolean.js.map","import { areDataBindingsHookedIntoCore, hookDataDecoratorIntoCore, } from \"./DataPlugin\";\r\nexport function data(targetOrAttributeKey, propertyKeyOrSerializer) {\r\n    // First case will be used if we have a custom attribute and a valid serializer (which is typeof ISerializer)\r\n    if (typeof targetOrAttributeKey === \"string\" && typeof propertyKeyOrSerializer !== \"string\") {\r\n        var customAttributeKey_1 = targetOrAttributeKey;\r\n        var serializer_1 = propertyKeyOrSerializer;\r\n        return function (target, propertyKey) {\r\n            if (!areDataBindingsHookedIntoCore) {\r\n                // prevent multiple hook listeners\r\n                hookDataDecoratorIntoCore();\r\n            }\r\n            if (!target.__dataBindings) {\r\n                target.__dataBindings = [];\r\n            }\r\n            var attributeKey = \"data-\" + customAttributeKey_1;\r\n            target.__dataBindings.push([propertyKey, attributeKey, serializer_1]);\r\n        };\r\n    }\r\n    if (typeof targetOrAttributeKey === \"string\" || typeof propertyKeyOrSerializer !== \"string\") {\r\n        // this case should not occur, the only case could be a respec of the decorators\r\n        throw new Error(\"Unexpected usage of @data\");\r\n    }\r\n    // We only have a simple decorator which will need to autobind values via prop-key\r\n    var target = targetOrAttributeKey;\r\n    var propertyKey = propertyKeyOrSerializer;\r\n    if (!areDataBindingsHookedIntoCore) {\r\n        // prevent multiple hook listeners\r\n        hookDataDecoratorIntoCore();\r\n    }\r\n    if (!target.__dataBindings) {\r\n        target.__dataBindings = [];\r\n    }\r\n    var attributeKey = convertPropertyKeyToDataAttributeKey(propertyKey);\r\n    target.__dataBindings.push([propertyKey, attributeKey, undefined]);\r\n}\r\n/**\r\n * Will convert any possible property to a valid data attribute\r\n * @param {string} propertyKey    the prop to convert\r\n */\r\nfunction convertPropertyKeyToDataAttributeKey(propertyKey) {\r\n    if (propertyKey.substr(0, 1) === \"_\") {\r\n        propertyKey = propertyKey.substr(1);\r\n    }\r\n    if (propertyKey.substr(0, 4) !== \"data\") {\r\n        throw new Error(propertyKey + \"\\\" has an invalid format please use @data dataSomeProp (data-some-prop) for valid bindings.\");\r\n    }\r\n    return propertyKey.replace(/([a-zA-Z])(?=[A-Z])/g, \"$1-\").toLowerCase();\r\n}\r\n//# sourceMappingURL=DataDecorator.js.map"],"names":["areDataBindingsHookedIntoCore","hookDataDecoratorIntoCore","addGondelPluginEventListener","gondelComponents","_","next","forEach","gondelComponent","componentDataBindings","prototype","__dataBindings","length","_a","propertyKey","attributeKey","serializer","initialValue","Object","defineProperty","enumerable","configurable","get","value","_ctx","getAttribute","deserialize","set","undefined","removeAttribute","serialize","setAttribute","JSON","stringify","parse","parseFloat","targetOrAttributeKey","propertyKeyOrSerializer","customAttributeKey_1","serializer_1","target","push","Error","substr","replace","toLowerCase","convertPropertyKeyToDataAttributeKey"],"mappings":"ySACO,IAAIA,GAAgC,EACpC,SAASC,IACZD,GAAgC,EAChCE,+BAA6B,OAAQ,QAAS,SAAUC,EAAkBC,EAAGC,GACzEF,EAAiBG,QAAQ,SAAUC,GAC/B,IAAIC,EAAyBD,EAAgBE,WACzCF,EAAgBE,UAAUC,gBAC1BH,EAAgBG,eACpB,IAAKF,GAA0D,IAAjCA,EAAsBG,OAChD,OAAON,EAAKF,GAEhBK,EAAsBF,QAAQ,SAAUM,GACpC,IAAIC,EAAcD,EAAG,GAAIE,EAAeF,EAAG,GAAIG,EAAaH,EAAG,GAC3DI,EAAeT,EAAgBM,GACnCI,OAAOC,eAAeX,EAAiBM,EAAa,CAChDM,YAAY,EACZC,cAAc,EACdC,IAAK,WACD,IAAIC,EAAQf,EAAgBgB,KAAKC,aAAaV,GAC9C,OAAIC,GAAwB,OAAVO,EACPP,EAAWU,YAAYH,GAE3BA,GAEXI,IAAK,SAAUJ,QACGK,IAAVL,GACAf,EAAgBgB,KAAKK,gBAAgBd,GAErCC,IACAO,EAAQP,EAAWc,UAAUP,IAEjCf,EAAgBgB,KAAKO,aAAahB,EAAcQ,MAGpDN,IACAT,EAAgBM,GACZN,EAAgBM,IAAgBG,EACpCA,OAAeW,OAI3BtB,EAAKF,KC1CN,MAEQ,CACX0B,UAHmB,SAAUP,GAAS,OAAOS,KAAKC,UAAUV,IAI5DG,YAHqB,SAAUH,GAAS,OAAOS,KAAKE,MAAMX,OCC/C,CACXO,UAHmB,SAAUP,GAAS,MAAO,GAAKA,GAIlDG,YAHqB,SAAUH,GAAS,OAAOY,WAAWZ,yBCC/C,CACXO,UAHmB,SAAUP,GAAS,MAAO,GAAKA,GAIlDG,YAHqB,SAAUH,GAAS,MAAiB,SAAVA,mDCA5C,SAAca,EAAsBC,GAEvC,GAAoC,iBAAzBD,GAAwE,iBAA5BC,EAAsC,CACzF,IAAIC,EAAuBF,EACvBG,EAAeF,EACnB,OAAO,SAAUG,EAAQ1B,GAChBb,GAEDC,IAECsC,EAAO7B,iBACR6B,EAAO7B,eAAiB,IAG5B6B,EAAO7B,eAAe8B,KAAK,CAAC3B,EADT,QAAUwB,EAC0BC,KAG/D,GAAoC,iBAAzBH,GAAwE,iBAA5BC,EAEnD,MAAM,IAAIK,MAAM,6BAGpB,IAAIF,EAASJ,EACTtB,EAAcuB,EACbpC,GAEDC,IAECsC,EAAO7B,iBACR6B,EAAO7B,eAAiB,IAExBI,EAOR,SAA8CD,GACT,MAA7BA,EAAY6B,OAAO,EAAG,KACtB7B,EAAcA,EAAY6B,OAAO,IAErC,GAAiC,SAA7B7B,EAAY6B,OAAO,EAAG,GAG1B,OAAO7B,EAAY8B,QAAQ,uBAAwB,OAAOC,cAFtD,MAAM,IAAIH,MAAM5B,EAAc,8FAZfgC,CAAqChC,GACxD0B,EAAO7B,eAAe8B,KAAK,CAAC3B,EAAaC,OAAca"}
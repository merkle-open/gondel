/**
 * Loading the angular required dependencies async
 */
export declare const loadAngularInternals: () => {
    Compiler: Promise<typeof import("@angular/compiler") | {
        default: typeof import("@angular/compiler");
        core: typeof import("@angular/compiler/src/core");
        CompilerConfig: typeof import("@angular/compiler").CompilerConfig;
        preserveWhitespacesDefault: typeof import("@angular/compiler").preserveWhitespacesDefault;
        isLoweredSymbol: typeof import("@angular/compiler").isLoweredSymbol;
        createLoweredSymbol: typeof import("@angular/compiler").createLoweredSymbol;
        Identifiers: typeof import("@angular/compiler").Identifiers;
        JitCompiler: typeof import("@angular/compiler").JitCompiler;
        ConstantPool: typeof import("@angular/compiler").ConstantPool;
        DirectiveResolver: typeof import("@angular/compiler").DirectiveResolver;
        PipeResolver: typeof import("@angular/compiler").PipeResolver;
        NgModuleResolver: typeof import("@angular/compiler").NgModuleResolver;
        DEFAULT_INTERPOLATION_CONFIG: import("@angular/compiler").InterpolationConfig;
        InterpolationConfig: typeof import("@angular/compiler").InterpolationConfig;
        NgModuleCompiler: typeof import("@angular/compiler").NgModuleCompiler;
        ArrayType: typeof import("@angular/compiler").ArrayType;
        AssertNotNull: typeof import("@angular/compiler").AssertNotNull;
        DYNAMIC_TYPE: import("@angular/compiler").BuiltinType;
        BinaryOperator: typeof import("@angular/compiler").BinaryOperator;
        BinaryOperatorExpr: typeof import("@angular/compiler").BinaryOperatorExpr;
        BuiltinMethod: typeof import("@angular/compiler").BuiltinMethod;
        BuiltinType: typeof import("@angular/compiler").BuiltinType;
        BuiltinTypeName: typeof import("@angular/compiler").BuiltinTypeName;
        BuiltinVar: typeof import("@angular/compiler").BuiltinVar;
        CastExpr: typeof import("@angular/compiler").CastExpr;
        ClassField: typeof import("@angular/compiler").ClassField;
        ClassMethod: typeof import("@angular/compiler").ClassMethod;
        ClassStmt: typeof import("@angular/compiler").ClassStmt;
        CommaExpr: typeof import("@angular/compiler").CommaExpr;
        CommentStmt: typeof import("@angular/compiler").CommentStmt;
        ConditionalExpr: typeof import("@angular/compiler").ConditionalExpr;
        DeclareFunctionStmt: typeof import("@angular/compiler").DeclareFunctionStmt;
        DeclareVarStmt: typeof import("@angular/compiler").DeclareVarStmt;
        Expression: typeof import("@angular/compiler").Expression;
        ExpressionStatement: typeof import("@angular/compiler").ExpressionStatement;
        ExpressionType: typeof import("@angular/compiler").ExpressionType;
        ExternalExpr: typeof import("@angular/compiler").ExternalExpr;
        ExternalReference: typeof import("@angular/compiler").ExternalReference;
        literalMap: typeof import("@angular/compiler").literalMap;
        FunctionExpr: typeof import("@angular/compiler").FunctionExpr;
        IfStmt: typeof import("@angular/compiler").IfStmt;
        InstantiateExpr: typeof import("@angular/compiler").InstantiateExpr;
        InvokeFunctionExpr: typeof import("@angular/compiler").InvokeFunctionExpr;
        InvokeMethodExpr: typeof import("@angular/compiler").InvokeMethodExpr;
        JSDocCommentStmt: typeof import("@angular/compiler").JSDocCommentStmt;
        LiteralArrayExpr: typeof import("@angular/compiler").LiteralArrayExpr;
        LiteralExpr: typeof import("@angular/compiler").LiteralExpr;
        LiteralMapExpr: typeof import("@angular/compiler").LiteralMapExpr;
        MapType: typeof import("@angular/compiler").MapType;
        NotExpr: typeof import("@angular/compiler").NotExpr;
        ReadKeyExpr: typeof import("@angular/compiler").ReadKeyExpr;
        ReadPropExpr: typeof import("@angular/compiler").ReadPropExpr;
        ReadVarExpr: typeof import("@angular/compiler").ReadVarExpr;
        ReturnStatement: typeof import("@angular/compiler").ReturnStatement;
        ThrowStmt: typeof import("@angular/compiler").ThrowStmt;
        TryCatchStmt: typeof import("@angular/compiler").TryCatchStmt;
        Type: typeof import("@angular/compiler").Type;
        WrappedNodeExpr: typeof import("@angular/compiler").WrappedNodeExpr;
        WriteKeyExpr: typeof import("@angular/compiler").WriteKeyExpr;
        WritePropExpr: typeof import("@angular/compiler").WritePropExpr;
        WriteVarExpr: typeof import("@angular/compiler").WriteVarExpr;
        StmtModifier: typeof import("@angular/compiler").StmtModifier;
        Statement: typeof import("@angular/compiler").Statement;
        STRING_TYPE: import("@angular/compiler").BuiltinType;
        TypeofExpr: typeof import("@angular/compiler").TypeofExpr;
        collectExternalReferences: typeof import("@angular/compiler").collectExternalReferences;
        EmitterVisitorContext: typeof import("@angular/compiler").EmitterVisitorContext;
        JitEvaluator: typeof import("@angular/compiler").JitEvaluator;
        ViewCompiler: typeof import("@angular/compiler").ViewCompiler;
        findStaticQueryIds: typeof import("@angular/compiler").findStaticQueryIds;
        staticViewQueryIds: typeof import("@angular/compiler").staticViewQueryIds;
        getParseErrors: typeof import("@angular/compiler").getParseErrors;
        isSyntaxError: typeof import("@angular/compiler").isSyntaxError;
        syntaxError: typeof import("@angular/compiler").syntaxError;
        Version: typeof import("@angular/compiler").Version;
        TmplAstBoundAttribute: typeof import("@angular/compiler").TmplAstBoundAttribute;
        TmplAstBoundEvent: typeof import("@angular/compiler").TmplAstBoundEvent;
        TmplAstBoundText: typeof import("@angular/compiler").TmplAstBoundText;
        TmplAstContent: typeof import("@angular/compiler").TmplAstContent;
        TmplAstElement: typeof import("@angular/compiler").TmplAstElement;
        TmplAstRecursiveVisitor: typeof import("@angular/compiler").TmplAstRecursiveVisitor;
        TmplAstReference: typeof import("@angular/compiler").TmplAstReference;
        TmplAstTemplate: typeof import("@angular/compiler").TmplAstTemplate;
        TmplAstText: typeof import("@angular/compiler").TmplAstText;
        TmplAstTextAttribute: typeof import("@angular/compiler").TmplAstTextAttribute;
        TmplAstVariable: typeof import("@angular/compiler").TmplAstVariable;
        R3Identifiers: typeof import("@angular/compiler").R3Identifiers;
        R3ResolvedDependencyType: typeof import("@angular/compiler").R3ResolvedDependencyType;
        compileInjector: typeof import("@angular/compiler").compileInjector;
        compileNgModule: typeof import("@angular/compiler").compileNgModule;
        compilePipeFromMetadata: typeof import("@angular/compiler").compilePipeFromMetadata;
        makeBindingParser: typeof import("@angular/compiler").makeBindingParser;
        parseTemplate: typeof import("@angular/compiler").parseTemplate;
        compileBaseDefFromMetadata: typeof import("@angular/compiler").compileBaseDefFromMetadata;
        compileComponentFromMetadata: typeof import("@angular/compiler").compileComponentFromMetadata;
        compileDirectiveFromMetadata: typeof import("@angular/compiler").compileDirectiveFromMetadata;
        parseHostBindings: typeof import("@angular/compiler").parseHostBindings;
        verifyHostBindings: typeof import("@angular/compiler").verifyHostBindings;
        publishFacade: typeof import("@angular/compiler").publishFacade;
        VERSION: import("@angular/compiler").Version;
        templateVisitAll(visitor: import("@angular/compiler").TemplateAstVisitor, asts: import("@angular/compiler").TemplateAst[], context?: any): any[];
        TextAst: typeof import("@angular/compiler").TextAst;
        BoundTextAst: typeof import("@angular/compiler").BoundTextAst;
        AttrAst: typeof import("@angular/compiler").AttrAst;
        PropertyBindingType: typeof import("@angular/compiler").PropertyBindingType;
        BoundElementPropertyAst: typeof import("@angular/compiler").BoundElementPropertyAst;
        BoundEventAst: typeof import("@angular/compiler").BoundEventAst;
        ReferenceAst: typeof import("@angular/compiler").ReferenceAst;
        VariableAst: typeof import("@angular/compiler").VariableAst;
        ElementAst: typeof import("@angular/compiler").ElementAst;
        EmbeddedTemplateAst: typeof import("@angular/compiler").EmbeddedTemplateAst;
        BoundDirectivePropertyAst: typeof import("@angular/compiler").BoundDirectivePropertyAst;
        DirectiveAst: typeof import("@angular/compiler").DirectiveAst;
        ProviderAst: typeof import("@angular/compiler").ProviderAst;
        ProviderAstType: typeof import("@angular/compiler").ProviderAstType;
        NgContentAst: typeof import("@angular/compiler").NgContentAst;
        NullTemplateVisitor: typeof import("@angular/compiler").NullTemplateVisitor;
        RecursiveTemplateAstVisitor: typeof import("@angular/compiler").RecursiveTemplateAstVisitor;
        sanitizeIdentifier(name: string): string;
        identifierName(compileIdentifier: import("@angular/compiler").CompileIdentifierMetadata | null | undefined): string | null;
        identifierModuleUrl(compileIdentifier: import("@angular/compiler").CompileIdentifierMetadata): string;
        viewClassName(compType: any, embeddedTemplateIndex: number): string;
        rendererTypeName(compType: any): string;
        hostViewClassName(compType: any): string;
        componentFactoryName(compType: any): string;
        tokenName(token: import("@angular/compiler").CompileTokenMetadata): string | null;
        tokenReference(token: import("@angular/compiler").CompileTokenMetadata): any;
        flatten<T>(list: (T | T[])[]): T[];
        templateSourceUrl(ngModuleType: import("@angular/compiler").CompileIdentifierMetadata, compMeta: {
            type: import("@angular/compiler").CompileIdentifierMetadata;
        }, templateMeta: {
            isInline: boolean;
            templateUrl: string | null;
        }): string;
        sharedStylesheetJitUrl(meta: import("@angular/compiler").CompileStylesheetMetadata, id: number): string;
        ngModuleJitUrl(moduleMeta: import("@angular/compiler").CompileNgModuleMetadata): string;
        templateJitUrl(ngModuleType: import("@angular/compiler").CompileIdentifierMetadata, compMeta: import("@angular/compiler").CompileDirectiveMetadata): string;
        CompileSummaryKind: typeof import("@angular/compiler").CompileSummaryKind;
        CompileStylesheetMetadata: typeof import("@angular/compiler").CompileStylesheetMetadata;
        CompileTemplateMetadata: typeof import("@angular/compiler").CompileTemplateMetadata;
        CompileDirectiveMetadata: typeof import("@angular/compiler").CompileDirectiveMetadata;
        CompilePipeMetadata: typeof import("@angular/compiler").CompilePipeMetadata;
        CompileShallowModuleMetadata: typeof import("@angular/compiler").CompileShallowModuleMetadata;
        CompileNgModuleMetadata: typeof import("@angular/compiler").CompileNgModuleMetadata;
        TransitiveCompileNgModuleMetadata: typeof import("@angular/compiler").TransitiveCompileNgModuleMetadata;
        ProviderMeta: typeof import("@angular/compiler").ProviderMeta;
        createAotUrlResolver(host: {
            resourceNameToFileName(resourceName: string, containingFileName: string): string | null;
        }): import("@angular/compiler").UrlResolver;
        createAotCompiler(compilerHost: import("@angular/compiler").AotCompilerHost, options: import("@angular/compiler").AotCompilerOptions, errorCollector?: ((error: any, type?: any) => void) | undefined): {
            compiler: import("@angular/compiler").AotCompiler;
            reflector: import("@angular/compiler").StaticReflector;
        };
        analyzeNgModules(fileNames: string[], host: import("@angular/compiler").NgAnalyzeModulesHost, staticSymbolResolver: import("@angular/compiler").StaticSymbolResolver, metadataResolver: import("@angular/compiler").CompileMetadataResolver): import("@angular/compiler").NgAnalyzedModules;
        analyzeAndValidateNgModules(fileNames: string[], host: import("@angular/compiler").NgAnalyzeModulesHost, staticSymbolResolver: import("@angular/compiler").StaticSymbolResolver, metadataResolver: import("@angular/compiler").CompileMetadataResolver): import("@angular/compiler").NgAnalyzedModules;
        analyzeFile(host: import("@angular/compiler").NgAnalyzeModulesHost, staticSymbolResolver: import("@angular/compiler").StaticSymbolResolver, metadataResolver: import("@angular/compiler").CompileMetadataResolver, fileName: string): import("@angular/compiler").NgAnalyzedFile;
        analyzeFileForInjectables(host: import("@angular/compiler").NgAnalyzeModulesHost, staticSymbolResolver: import("@angular/compiler").StaticSymbolResolver, metadataResolver: import("@angular/compiler").CompileMetadataResolver, fileName: string): import("@angular/compiler").NgAnalyzedFileWithInjectables;
        mergeAnalyzedFiles(analyzedFiles: import("@angular/compiler").NgAnalyzedFile[]): import("@angular/compiler").NgAnalyzedModules;
        AotCompiler: typeof import("@angular/compiler").AotCompiler;
        toTypeScript(file: import("@angular/compiler").GeneratedFile, preamble?: string | undefined): string;
        GeneratedFile: typeof import("@angular/compiler").GeneratedFile;
        formattedError(chain: import("@angular/compiler").FormattedMessageChain): import("@angular/compiler").FormattedError;
        isFormattedError(error: Error): error is import("@angular/compiler").FormattedError;
        StaticReflector: typeof import("@angular/compiler").StaticReflector;
        StaticSymbol: typeof import("@angular/compiler").StaticSymbol;
        StaticSymbolCache: typeof import("@angular/compiler").StaticSymbolCache;
        unescapeIdentifier(identifier: string): string;
        unwrapResolvedMetadata(metadata: any): any;
        ResolvedStaticSymbol: typeof import("@angular/compiler").ResolvedStaticSymbol;
        StaticSymbolResolver: typeof import("@angular/compiler").StaticSymbolResolver;
        AotSummaryResolver: typeof import("@angular/compiler").AotSummaryResolver;
        AstPath: typeof import("@angular/compiler").AstPath;
        SummaryResolver: typeof import("@angular/compiler").SummaryResolver;
        JitSummaryResolver: typeof import("@angular/compiler").JitSummaryResolver;
        CompileReflector: typeof import("@angular/compiler").CompileReflector;
        createUrlResolverWithoutPackagePrefix(): import("@angular/compiler").UrlResolver;
        createOfflineCompileUrlResolver(): import("@angular/compiler").UrlResolver;
        getUrlScheme(url: string): string;
        UrlResolver: import("@angular/compiler").UrlResolverCtor;
        ResourceLoader: typeof import("@angular/compiler").ResourceLoader;
        ElementSchemaRegistry: typeof import("@angular/compiler").ElementSchemaRegistry;
        Extractor: typeof import("@angular/compiler").Extractor;
        I18NHtmlParser: typeof import("@angular/compiler").I18NHtmlParser;
        MessageBundle: typeof import("@angular/compiler").MessageBundle;
        Serializer: typeof import("@angular/compiler").Serializer;
        Xliff: typeof import("@angular/compiler").Xliff;
        Xliff2: typeof import("@angular/compiler").Xliff2;
        Xmb: typeof import("@angular/compiler").Xmb;
        Xtb: typeof import("@angular/compiler").Xtb;
        DirectiveNormalizer: typeof import("@angular/compiler").DirectiveNormalizer;
        visitAstChildren(ast: import("@angular/compiler").AST, visitor: import("@angular/compiler").AstVisitor, context?: any): void;
        ParserError: typeof import("@angular/compiler").ParserError;
        ParseSpan: typeof import("@angular/compiler").ParseSpan;
        AST: typeof import("@angular/compiler").AST;
        Quote: typeof import("@angular/compiler").Quote;
        EmptyExpr: typeof import("@angular/compiler").EmptyExpr;
        ImplicitReceiver: typeof import("@angular/compiler").ImplicitReceiver;
        Chain: typeof import("@angular/compiler").Chain;
        Conditional: typeof import("@angular/compiler").Conditional;
        PropertyRead: typeof import("@angular/compiler").PropertyRead;
        PropertyWrite: typeof import("@angular/compiler").PropertyWrite;
        SafePropertyRead: typeof import("@angular/compiler").SafePropertyRead;
        KeyedRead: typeof import("@angular/compiler").KeyedRead;
        KeyedWrite: typeof import("@angular/compiler").KeyedWrite;
        BindingPipe: typeof import("@angular/compiler").BindingPipe;
        LiteralPrimitive: typeof import("@angular/compiler").LiteralPrimitive;
        LiteralArray: typeof import("@angular/compiler").LiteralArray;
        LiteralMap: typeof import("@angular/compiler").LiteralMap;
        Interpolation: typeof import("@angular/compiler").Interpolation;
        Binary: typeof import("@angular/compiler").Binary;
        PrefixNot: typeof import("@angular/compiler").PrefixNot;
        NonNullAssert: typeof import("@angular/compiler").NonNullAssert;
        MethodCall: typeof import("@angular/compiler").MethodCall;
        SafeMethodCall: typeof import("@angular/compiler").SafeMethodCall;
        FunctionCall: typeof import("@angular/compiler").FunctionCall;
        AbsoluteSourceSpan: typeof import("@angular/compiler").AbsoluteSourceSpan;
        ASTWithSource: typeof import("@angular/compiler").ASTWithSource;
        TemplateBinding: typeof import("@angular/compiler").TemplateBinding;
        NullAstVisitor: typeof import("@angular/compiler").NullAstVisitor;
        RecursiveAstVisitor: typeof import("@angular/compiler").RecursiveAstVisitor;
        AstTransformer: typeof import("@angular/compiler").AstTransformer;
        AstMemoryEfficientTransformer: typeof import("@angular/compiler").AstMemoryEfficientTransformer;
        ParsedProperty: typeof import("@angular/compiler").ParsedProperty;
        ParsedPropertyType: typeof import("@angular/compiler").ParsedPropertyType;
        ParsedEventType: typeof import("@angular/compiler").ParsedEventType;
        ParsedEvent: typeof import("@angular/compiler").ParsedEvent;
        ParsedVariable: typeof import("@angular/compiler").ParsedVariable;
        BindingType: typeof import("@angular/compiler").BindingType;
        BoundElementProperty: typeof import("@angular/compiler").BoundElementProperty;
        isIdentifier(input: string): boolean;
        isQuote(code: number): boolean;
        TokenType: typeof import("@angular/compiler").TokenType;
        Lexer: typeof import("@angular/compiler").Lexer;
        Token: typeof import("@angular/compiler").Token;
        EOF: import("@angular/compiler").Token;
        SplitInterpolation: typeof import("@angular/compiler").SplitInterpolation;
        TemplateBindingParseResult: typeof import("@angular/compiler").TemplateBindingParseResult;
        Parser: typeof import("@angular/compiler").Parser;
        _ParseAST: typeof import("@angular/compiler")._ParseAST;
        ERROR_COMPONENT_TYPE: "ngComponentType";
        CompileMetadataResolver: typeof import("@angular/compiler").CompileMetadataResolver;
        visitAll(visitor: import("@angular/compiler").Visitor, nodes: import("@angular/compiler").Node[], context?: any): any[];
        findNode(nodes: import("@angular/compiler").Node[], position: number): import("@angular/compiler").HtmlAstPath;
        Text: typeof import("@angular/compiler").Text;
        Expansion: typeof import("@angular/compiler").Expansion;
        ExpansionCase: typeof import("@angular/compiler").ExpansionCase;
        Attribute: typeof import("@angular/compiler").Attribute;
        Element: typeof import("@angular/compiler").Element;
        Comment: typeof import("@angular/compiler").Comment;
        RecursiveVisitor: typeof import("@angular/compiler").RecursiveVisitor;
        ParseTreeResult: typeof import("@angular/compiler").ParseTreeResult;
        TreeError: typeof import("@angular/compiler").TreeError;
        HtmlParser: typeof import("@angular/compiler").HtmlParser;
        getHtmlTagDefinition(tagName: string): import("@angular/compiler").HtmlTagDefinition;
        HtmlTagDefinition: typeof import("@angular/compiler").HtmlTagDefinition;
        splitNsName(elementName: string): [string | null, string];
        isNgContainer(tagName: string): boolean;
        isNgContent(tagName: string): boolean;
        isNgTemplate(tagName: string): boolean;
        getNsPrefix(fullName: string): string;
        getNsPrefix(fullName: null): null;
        mergeNsAndName(prefix: string, localName: string): string;
        TagContentType: typeof import("@angular/compiler").TagContentType;
        NAMED_ENTITIES: {
            [k: string]: string;
        };
        NGSP_UNICODE: "";
        debugOutputAstAsTypeScript(ast: any[] | import("@angular/compiler").Type | import("@angular/compiler").Expression | import("@angular/compiler").Statement): string;
        TypeScriptEmitter: typeof import("@angular/compiler").TypeScriptEmitter;
        typeSourceSpan(kind: string, type: import("@angular/compiler").CompileIdentifierMetadata): import("@angular/compiler").ParseSourceSpan;
        r3JitTypeSourceSpan(kind: string, typeName: string, sourceUrl: string): import("@angular/compiler").ParseSourceSpan;
        ParseLocation: typeof import("@angular/compiler").ParseLocation;
        ParseSourceFile: typeof import("@angular/compiler").ParseSourceFile;
        ParseSourceSpan: typeof import("@angular/compiler").ParseSourceSpan;
        EMPTY_PARSE_LOCATION: import("@angular/compiler").ParseLocation;
        EMPTY_SOURCE_SPAN: import("@angular/compiler").ParseSourceSpan;
        ParseErrorLevel: typeof import("@angular/compiler").ParseErrorLevel;
        ParseError: typeof import("@angular/compiler").ParseError;
        DomElementSchemaRegistry: typeof import("@angular/compiler").DomElementSchemaRegistry;
        CssSelector: typeof import("@angular/compiler").CssSelector;
        SelectorMatcher: typeof import("@angular/compiler").SelectorMatcher;
        SelectorListContext: typeof import("@angular/compiler").SelectorListContext;
        SelectorContext: typeof import("@angular/compiler").SelectorContext;
        HOST_ATTR: string;
        CONTENT_ATTR: string;
        StylesCompileDependency: typeof import("@angular/compiler").StylesCompileDependency;
        CompiledStylesheet: typeof import("@angular/compiler").CompiledStylesheet;
        StyleCompiler: typeof import("@angular/compiler").StyleCompiler;
        splitClasses(classAttrValue: string): string[];
        createElementCssSelector(elementName: string, attributes: [string, string][]): import("@angular/compiler").CssSelector;
        removeSummaryDuplicates<T_1 extends {
            type: import("@angular/compiler").CompileTypeMetadata;
        }>(items: T_1[]): T_1[];
        isEmptyExpression(ast: import("@angular/compiler").AST): boolean;
        TemplateParseError: typeof import("@angular/compiler").TemplateParseError;
        TemplateParseResult: typeof import("@angular/compiler").TemplateParseResult;
        TemplateParser: typeof import("@angular/compiler").TemplateParser;
        compileInjectable(meta: import("@angular/compiler").R3InjectableMetadata): import("@angular/compiler").InjectableDef;
        R3TargetBinder: typeof import("@angular/compiler").R3TargetBinder;
        R3BoundTarget: typeof import("@angular/compiler").R3BoundTarget;
    }>;
    PlatformBrowser: Promise<typeof import("@angular/platform-browser") | {
        default: typeof import("@angular/platform-browser");
        disableDebugTools(): void;
        enableDebugTools<T_2>(ref: import("@angular/core").ComponentRef<T_2>): import("@angular/core").ComponentRef<T_2>;
        makeStateKey<T_3 = void>(key: string): import("@angular/platform-browser").StateKey<T_4>;
        ɵangular_packages_platform_browser_platform_browser_a(): import("@angular/core").ErrorHandler;
        ɵangular_packages_platform_browser_platform_browser_b(): any;
        ɵangular_packages_platform_browser_platform_browser_d(): import("@angular/platform-browser").Meta;
        ɵangular_packages_platform_browser_platform_browser_e(): import("@angular/platform-browser").Title;
        ɵangular_packages_platform_browser_platform_browser_f(doc: Document, appId: string): import("@angular/platform-browser").TransferState;
        ɵangular_packages_platform_browser_platform_browser_h(transitionId: string, document: any, injector: import("@angular/core").Injector): () => void;
        ɵangular_packages_platform_browser_platform_browser_j(coreTokens: import("@angular/core").NgProbeToken[]): any;
        ɵescapeHtml(text: string): string;
        ɵflattenStyles(compId: string, styles: any[], target: string[]): string[];
        ɵgetDOM(): import("@angular/platform-browser").ɵDomAdapter;
        ɵinitDomAdapter(): void;
        ɵsetRootDomAdapter(adapter: import("@angular/platform-browser").ɵDomAdapter): void;
        ɵshimContentAttribute(componentShortId: string): string;
        ɵshimHostAttribute(componentShortId: string): string;
        BrowserModule: typeof import("@angular/platform-browser").BrowserModule;
        BrowserTransferStateModule: typeof import("@angular/platform-browser").BrowserTransferStateModule;
        By: typeof import("@angular/platform-browser").By;
        DomSanitizer: typeof import("@angular/platform-browser").DomSanitizer;
        EVENT_MANAGER_PLUGINS: import("@angular/core").InjectionToken<import("@angular/platform-browser").ɵangular_packages_platform_browser_platform_browser_g[]>;
        EventManager: typeof import("@angular/platform-browser").EventManager;
        HAMMER_GESTURE_CONFIG: import("@angular/core").InjectionToken<import("@angular/platform-browser").HammerGestureConfig>;
        HAMMER_LOADER: import("@angular/core").InjectionToken<import("@angular/platform-browser").HammerLoader>;
        HammerGestureConfig: typeof import("@angular/platform-browser").HammerGestureConfig;
        Meta: typeof import("@angular/platform-browser").Meta;
        platformBrowser: (extraProviders?: import("@angular/core").StaticProvider[] | undefined) => import("@angular/core").PlatformRef;
        Title: typeof import("@angular/platform-browser").Title;
        TransferState: typeof import("@angular/platform-browser").TransferState;
        VERSION: import("@angular/core").Version;
        ɵangular_packages_platform_browser_platform_browser_c: import("@angular/core").StaticProvider[];
        ɵangular_packages_platform_browser_platform_browser_g: typeof import("@angular/platform-browser").ɵangular_packages_platform_browser_platform_browser_g;
        ɵangular_packages_platform_browser_platform_browser_i: import("@angular/core").StaticProvider[];
        ɵangular_packages_platform_browser_platform_browser_k: import("@angular/core").Provider[];
        ɵangular_packages_platform_browser_platform_browser_l: typeof import("@angular/platform-browser").ɵangular_packages_platform_browser_platform_browser_l;
        ɵBROWSER_SANITIZATION_PROVIDERS: import("@angular/core").StaticProvider[];
        ɵBrowserDomAdapter: typeof import("@angular/platform-browser").ɵBrowserDomAdapter;
        ɵBrowserGetTestability: typeof import("@angular/platform-browser").ɵBrowserGetTestability;
        ɵBrowserPlatformLocation: typeof import("@angular/platform-browser").ɵBrowserPlatformLocation;
        ɵDomAdapter: typeof import("@angular/platform-browser").ɵDomAdapter;
        ɵDomEventsPlugin: typeof import("@angular/platform-browser").ɵDomEventsPlugin;
        ɵDomRendererFactory2: typeof import("@angular/platform-browser").ɵDomRendererFactory2;
        ɵDomSanitizerImpl: typeof import("@angular/platform-browser").ɵDomSanitizerImpl;
        ɵDomSharedStylesHost: typeof import("@angular/platform-browser").ɵDomSharedStylesHost;
        ɵELEMENT_PROBE_PROVIDERS: import("@angular/core").Provider[];
        ɵELEMENT_PROBE_PROVIDERS__POST_R3__: never[];
        ɵHammerGesturesPlugin: typeof import("@angular/platform-browser").ɵHammerGesturesPlugin;
        ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: import("@angular/core").StaticProvider[];
        ɵKeyEventsPlugin: typeof import("@angular/platform-browser").ɵKeyEventsPlugin;
        ɵNAMESPACE_URIS: {
            [ns: string]: string;
        };
        ɵSharedStylesHost: typeof import("@angular/platform-browser").ɵSharedStylesHost;
        ɵTRANSITION_ID: import("@angular/core").InjectionToken<unknown>;
    }>;
    PlatformBrowserDynamic: Promise<typeof import("@angular/platform-browser-dynamic") | {
        default: typeof import("@angular/platform-browser-dynamic");
        JitCompilerFactory: typeof import("@angular/platform-browser-dynamic").JitCompilerFactory;
        platformBrowserDynamic: (extraProviders?: import("@angular/core").StaticProvider[] | undefined) => import("@angular/core").PlatformRef;
        RESOURCE_CACHE_PROVIDER: import("@angular/core").Provider[];
        VERSION: import("@angular/core").Version;
        ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a: typeof import("@angular/platform-browser-dynamic").ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a;
        ɵCompilerImpl: typeof import("@angular/platform-browser-dynamic").ɵCompilerImpl;
        ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: import("@angular/core").StaticProvider[];
        ɵplatformCoreDynamic: (extraProviders?: import("@angular/core").StaticProvider[] | undefined) => import("@angular/core").PlatformRef;
        ɵResourceLoaderImpl: typeof import("@angular/platform-browser-dynamic").ɵResourceLoaderImpl;
    }>;
    Zone: Promise<any>;
};
